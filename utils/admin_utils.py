from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InputMediaPhoto
from utils.TrustedUserUpdater import TrustedUserUpdater
from utils.messages import (
    get_moderation_rejected_message,
    get_moderation_approved_message,
)
from utils.keyboards import get_contact_seller_keyboard, render_stars
from typing import Optional
from utils.text_utils import clean_surrogates
import asyncio
import logging
from aiogram.types import InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import F
from aiogram.types import ForceReply
from datetime import datetime, timedelta
admin_router = Router()


class AdminUtils:
    def __init__(self, bot):
        self.bot = bot

    async def approve_lot(self, lot_id: int):
        print(f"\nüîé [approve_lot] –ü–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –ª–æ—Ç–∞ ID: {lot_id}")

        lot = await self.bot.db.get_lot(lot_id)
        print(f"üì¶ –õ–æ—Ç –∑ –ë–î: {lot}")

        if not lot:
            print(f"‚ùå –õ–æ—Ç {lot_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        user_id = lot.get('user_id')
        print(f"üë§ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ª–æ—Ç–∞: {user_id}")

        if user_id is None:
            print(f"‚ùå –£ –ª–æ—Ç–∞ {lot.get('id')} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π user_id!")
            return

        user = await self.bot.db.get_user_by_internal_id(user_id)
        print(f"üë• –û—Ç—Ä–∏–º–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user}")

        if not user:
            print(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ!")
            all_users = await self.bot.db.get_all_users()
            print(f"üóÇ –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: {all_users}")
            return

        if str(user.get("trusted")).lower() == 'true':

            print("üîÅ Trusted-—é–∑–µ—Ä: –ª–æ—Ç —É–∂–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ approve_lot.")
            return

        user_telegram_id = user.get('telegram_id')
        print(f"üì≤ Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_telegram_id}")

        if not user_telegram_id:
            print(f"‚ùå –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.get('id')} –Ω–µ–º–∞—î telegram_id")
            return
            
        if lot.get("status") == "active":
            print("üìå –õ–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ.")
            return


        # –í–∏—Ç—è–≥—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        images = lot.get('images') or []
        print(f"üñº –§–æ—Ç–æ –≤ –ª–æ—Ç—ñ: {images}")

        if not images:
            print(f"‚ùå –ù–µ–º–∞—î —Ñ–æ—Ç–æ –≤ –ª–æ—Ç—ñ! –ü—É–±–ª—ñ–∫–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            return

        caption = f"üîÅ {lot.get('generated_text', '')}"
        caption = clean_surrogates(caption) 
        print(f"üìù –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: {caption}")

        try:
            # –°–ü–û–ß–ê–¢–ö–£ –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–∞ –Ω–∞ 'active'
            await self.bot.db.update_lot_status(lot_id, 'active')
            print("üõ† –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–∞ –Ω–∞ 'active'")

            if len(images) == 1:
                print(f"üì§ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ–¥–Ω–µ —Ñ–æ—Ç–æ...")

                # 1. –§–æ—Ç–æ –∑ –æ–ø–∏—Å–æ–º
                photo_msg = await self.bot.send_photo(
                    chat_id=self.bot.config.CHANNEL_ID,
                    photo=images[0],
                    caption=caption,
                    parse_mode="Markdown"
                )
                print(f"‚úÖ –§–æ—Ç–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. ID: {photo_msg.message_id}")
                await self.bot.db.set_lot_message_id(lot_id, photo_msg.message_id)
                await self.bot.db.add_lot_message(lot_id, photo_msg.message_id)

                # 2. –ó—ñ—Ä–æ—á–∫–∏ + –∫–Ω–æ–ø–∫–∞
                stars = await render_stars(user_id, self.bot)
                contact_msg = await self.bot.send_message(
                    chat_id=self.bot.config.CHANNEL_ID,
                    text=f"{stars}",
                    reply_markup=get_contact_seller_keyboard(user_id=user_telegram_id)
                )
                print(f"‚úÖ –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é. ID: {contact_msg.message_id}")
                await self.bot.db.add_lot_message(lot_id, contact_msg.message_id)


            else:
                print(f"üì§ –ù–∞–¥—Å–∏–ª–∞—î–º–æ {len(images)} —Ñ–æ—Ç–æ —è–∫ –º–µ–¥—ñ–∞-–≥—Ä—É–ø—É...")

                media = [InputMediaPhoto(media=img) for img in images]
                media[0].caption = caption
                media[0].parse_mode = "Markdown"

                media_msgs = await self.bot.send_media_group(
                    chat_id=self.bot.config.CHANNEL_ID,
                    media=media
                )
                print(f"‚úÖ –ú–µ–¥—ñ–∞-–≥—Ä—É–ø–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {len(media_msgs)}")

                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if media_msgs:
                    await self.bot.db.set_lot_message_id(lot_id, media_msgs[0].message_id)
                    for msg in media_msgs:
                        await self.bot.db.add_lot_message(lot_id, msg.message_id)

                await asyncio.sleep(2)  # —Ç—Ä—ñ—à–∫–∏ —á–µ–∫–∞—î–º–æ

                try:
                            # ‚¨áÔ∏è –ó—ñ—Ä–æ—á–∫–∏ + –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü—è
                    stars = await render_stars(user_id, self.bot)
                    contact_msg = await self.bot.send_message(
                        chat_id=self.bot.config.CHANNEL_ID,
                        text=f"{stars}",
                        reply_markup=get_contact_seller_keyboard(user_id=user_telegram_id)
                    )
                    await self.bot.db.add_lot_message(lot_id, contact_msg.message_id)
                    print(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∑—ñ—Ä–æ—á–∫–∏ –∑ –∫–Ω–æ–ø–∫–æ—é –ø—Ä–æ–¥–∞–≤—Ü—è. ID: {contact_msg.message_id}")

                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏: {e}")
                    print(f"üë§ user_telegram_id: {user_telegram_id}")
                    print(f"üì¢ CHANNEL_ID: {self.bot.config.CHANNEL_ID}")

                approved_text = get_moderation_approved_message()
                await self.bot.send_message(chat_id=user_telegram_id, text=approved_text)
                print("üì® –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –º–æ–¥–µ—Ä–∞—Ü—ñ—é")


        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ª–æ—Ç–∞ {lot.get('id', lot_id) if lot else lot_id}: {e}")
            # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞–∑–∞–¥
            await self.bot.db.update_lot_status(lot_id, 'pending')
            print(f"üì∏ images: {images}")
            print(f"üßæ generated_text: {caption}")
            print(f"üë§ user: {user}")

    async def reject_lot(self, lot_id: int, reason: str = None):
        lot = await self.bot.db.get_lot(lot_id)
        if not lot:
            print(f"‚ùå –õ–æ—Ç {lot_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è")
            return
        
        user = await self.bot.db.get_user_by_internal_id(lot['user_id'])

        text = get_moderation_rejected_message(reason)
        await self.bot.send_message(chat_id=user['telegram_id'], text=text)
        await self.bot.db.update_lot_status(lot_id, 'rejected')


# ‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫

@admin_router.callback_query(F.data.startswith("mod_approve_"))
async def handle_mod_approve(callback: CallbackQuery):
    try:
        lot_id = int(callback.data.replace("mod_approve_", ""))
        await callback.bot.admin_utils.approve_lot(lot_id)
        
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î caption –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
        if callback.message.caption:
            await callback.message.edit_caption(
                caption="‚úÖ –õ–æ—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.", 
                reply_markup=None
            )
        else:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î caption, —Ä–µ–¥–∞–≥—É—î–º–æ —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(
                text="‚úÖ –õ–æ—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.", 
                reply_markup=None
            )

        await callback.answer("–°—Ö–≤–∞–ª–µ–Ω–æ")
        
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
        await asyncio.sleep(2)
        try:
            await callback.message.delete()
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            
    except Exception as e:
        await callback.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", show_alert=True)


@admin_router.callback_query(F.data.startswith("mod_reject_"))
async def handle_mod_reject(callback: CallbackQuery, state: FSMContext):
    try:
        lot_id = int(callback.data.replace("mod_reject_", ""))
        await state.update_data(lot_id=lot_id)

        await callback.message.answer(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥–º–æ–≤–∏ (–≤–æ–Ω–∞ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É):",
            reply_markup=ForceReply()
        )

        await callback.answer()

    except Exception as e:
        await callback.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", show_alert=True)

@admin_router.message(F.reply_to_message, F.reply_to_message.text.startswith("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥–º–æ–≤–∏"))
async def process_reject_reason(message: Message, state: FSMContext):
    data = await state.get_data()
    lot_id = data.get("lot_id")
    reason = message.text.strip()

    # –í—ñ–¥–º—ñ—á–∞—î–º–æ –ª–æ—Ç —è–∫ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏–π
    await message.bot.admin_utils.reject_lot(lot_id, "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")

    # –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ—Ç —ñ user_id
    lot = await message.bot.db.get_lot(lot_id)
    user_id = lot["user_id"]

    # –û—Ç—Ä–∏–º—É—î–º–æ telegram_id –∑–∞ user_id
    telegram_id = await message.bot.db.get_telegram_id_by_user_id(user_id)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    if telegram_id:
        try:
            await message.bot.send_message(
                chat_id=telegram_id,
                text=f"–í–∞—à –ª–æ—Ç –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ü—ñ—î—é.\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason} –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ª–æ—Ç, –≤–∏–ø—Ä–∞–≤–∏–≤—à–∏ –ø–æ–º–∏–ª–∫–∏."
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —é–∑–µ—Ä—É: {e}")
    else:
        print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ telegram_id –¥–ª—è user_id={user_id}")

    await message.reply("‚úÖ –í—ñ–¥—Ö–∏–ª–µ–Ω–æ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
    await state.clear()


class AdminUserStates(StatesGroup):
    waiting_for_identifier = State()  # –ø–æ—à—É–∫ –ø–æ –µ–º–µ–π–ª/—Ç–µ–ª–µ—Ñ–æ–Ω—É
    waiting_for_warning_text = State()  # —Ç–µ–∫—Å—Ç –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è



@admin_router.callback_query(F.data == "admin_users")
async def handle_user_management(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üîç –í–≤–µ–¥–∏ @username –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    await state.set_state(AdminUserStates.waiting_for_identifier)
    await callback.answer()


@admin_router.message(AdminUserStates.waiting_for_identifier)
async def find_user(message: Message, state: FSMContext):
    text = message.text.strip()
    user = await message.bot.db.find_user_by_email_or_phone(text)

    if not user:
        await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ FSM
    await state.update_data(found_user=user)

    # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–æ–¥–∞—Ç–∏ –≤ –¥–æ–≤—ñ—Ä–µ–Ω—ñ", callback_data="admin_trust")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∏—Ç–∏", callback_data="admin_warn")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data="admin_ban_perm")],
        
        [InlineKeyboardButton(text="üîì –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data="admin_unban")]
    ])


    info = (
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π:\n"
        f"ID: {user['id']}\n"
        f"Telegram ID: {user['telegram_id']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
        f"üìß Email: {user['email']}\n"
        f"‚úÖ –î–æ–≤—ñ—Ä–µ–Ω–∏–π: {'–¢–∞–∫' if user['trusted'] else '–ù—ñ'}"
    )

    await message.answer(info, reply_markup=kb)


@admin_router.callback_query(F.data == "admin_warn")
async def warn_user_start(callback: CallbackQuery, state: FSMContext):
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ FSM
    data = await state.get_data()
    found_user = data.get('found_user')
    
    if not found_user:
        await callback.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        await callback.answer()
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    await state.update_data(
        warn_target_message=callback.message,
        target_user_id=found_user['id'],  # ID –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        target_telegram_id=found_user['telegram_id']  # Telegram ID –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
    )
    
    await callback.message.answer("‚úç –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    await state.set_state(AdminUserStates.waiting_for_warning_text)
    await callback.answer()

@admin_router.message(AdminUserStates.waiting_for_warning_text)
async def send_warning(message: Message, state: FSMContext):
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ FSM
    data = await state.get_data()
    found_user = data.get('found_user')
    target_telegram_id = data.get('target_telegram_id')
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
    if not found_user or not target_telegram_id:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        await state.clear()
        return
    
    try:
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await message.bot.send_message(
            chat_id=target_telegram_id,
            text=f"‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞:\n\n{message.text}"
        )
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —É—Å–ø—ñ—à–Ω–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
        user_info = f"üë§ {found_user.get('username', 'N/A')} (ID: {found_user['id']})"
        await message.answer(f"‚úÖ –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:\n{user_info}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: {e}")
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
    
    # –û—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ
    await state.clear()





logger = logging.getLogger(__name__)

@admin_router.callback_query(F.data == "admin_queue")
async def handle_queue(callback: CallbackQuery):
    logger.info("‚û°Ô∏è –ê–¥–º—ñ–Ω –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ß–µ—Ä–≥–∞' (admin_queue)")
    
    lots = await callback.bot.db.get_lots_by_status('pending')
    logger.info(f"ü•ü –ó–Ω–∞–π–¥–µ–Ω–æ {len(lots)} –ª–æ—Ç(—ñ–≤) —É —á–µ—Ä–∑—ñ")

    if not lots:
        await callback.answer("–ù–µ–º–∞—î –ª–æ—Ç—ñ–≤ —É —á–µ—Ä–∑—ñ", show_alert=True)
        return

    # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback –æ–¥—Ä–∞–∑—É, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await callback.message.answer(f"‚è≥ –£ —á–µ—Ä–∑—ñ {len(lots)} –ª–æ—Ç(—ñ–≤):")

    for lot in lots:
        user = await callback.bot.db.get_user_by_internal_id(lot['user_id'])
        telegram_id = user.get('telegram_id') if user else 'N/A'
        logger.info(f"üë§ –û–±—Ä–æ–±–ª—è—î–º–æ –ª–æ—Ç ID: {lot['id']}, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {telegram_id}")

        images = lot.get('images') or []
        logger.debug(f"üì∏ –§–æ—Ç–æ: {images}")

        generated_text = lot.get('generated_text', '')
        clean_text = clean_surrogates(generated_text or "üîç –û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.")

        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"mod_approve_{lot['id']}"),
                InlineKeyboardButton(text="üö´ –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"mod_reject_{lot['id']}")
            ]
        ])

        try:
            if len(images) > 1:
                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≥–∞–ª–µ—Ä–µ—é
                media = [InputMediaPhoto(media=img) for img in images]
                media[0].caption = f"üîç {clean_text}"
                media[0].parse_mode = "Markdown"

                await callback.bot.send_media_group(chat_id=callback.from_user.id, media=media)
                logger.info(f"üì∑ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ {len(images)} —Ñ–æ—Ç–æ —è–∫ media_group")

                await callback.bot.send_message(
                    chat_id=callback.from_user.id,
                    text="‚¨ÜÔ∏è –§–æ—Ç–æ –≤–∏—â–µ\n\nüìã –û–±–µ—Ä–∏ –¥—ñ—é:",
                    reply_markup=buttons
                )
                logger.info("üì¢ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—ñ—Å–ª—è –≥–∞–ª–µ—Ä–µ—ó")

            elif len(images) == 1:
                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ–¥–Ω–µ —Ñ–æ—Ç–æ –∑ –æ–ø–∏—Å–æ–º
                await callback.bot.send_photo(
                    chat_id=callback.from_user.id,
                    photo=images[0],
                    caption=f"üîç {clean_text}",
                    reply_markup=buttons,
                    parse_mode="Markdown"
                )
                logger.info("üì∏ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–¥–Ω–µ —Ñ–æ—Ç–æ –∑ caption")

            else:
                # –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ–º–∞—î
                await callback.bot.send_message(
                    chat_id=callback.from_user.id,
                    text=f"‚ö†Ô∏è –õ–æ—Ç –±–µ–∑ —Ñ–æ—Ç–æ\n\nüîç {clean_text}",
                    reply_markup=buttons,
                    parse_mode="Markdown"
                )
                logger.warning("‚ö†Ô∏è –õ–æ—Ç –±–µ–∑ —Ñ–æ—Ç–æ")

        except Exception as e:
            logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –ª–æ—Ç–∞ {lot['id']}: {e}")
            await callback.bot.send_message(
                chat_id=callback.from_user.id,
                text=f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∞–∑–∞—Ç–∏ –ª–æ—Ç #{lot['id']} —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É. –î–µ—Ç–∞–ª—ñ –≤ –ª–æ–≥–∞—Ö."
            )

    # –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–¥–∞–ª—è—î–º–æ –≤–∏—Ö—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ–∫–∞–∑—É –≤—Å—ñ—Ö –ª–æ—Ç—ñ–≤
    try:
        await callback.message.delete()
        logger.info("üßπ –í–∏–¥–∞–ª–µ–Ω–æ –≤–∏—Ö—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–µ—Ä–≥–æ—é")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
    
    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback –≤ –∫—ñ–Ω—Ü—ñ
    await callback.answer()


@admin_router.callback_query(F.data == "admin_trust")
async def add_to_trusted(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = data.get("found_user")

    if not user:
        await callback.message.answer("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å—Ç–∞–Ω—ñ.")
        await callback.answer()
        return

    telegram_id = user['telegram_id']
    await callback.bot.db.set_user_trusted(telegram_id, 'true')


    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —é–∑–µ—Ä—É
    try:
        await callback.bot.send_message(
            chat_id=telegram_id,
            text="üéâ –í–∞—Å –¥–æ–¥–∞–Ω–æ –¥–æ –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!\n"
                 "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –±—ñ–ª—å—à–µ —Ñ—É–Ω–∫—Ü—ñ–π —Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π üôå"
        )
        logger.info(f"üì© –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —é–∑–µ—Ä—É {telegram_id}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —é–∑–µ—Ä—É {telegram_id}: {e}")

    await callback.message.edit_text("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–Ω–æ –¥–æ –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö.")
    await callback.answer()




@admin_router.callback_query(F.data == "admin_trusted")
async def handle_trusted(callback: CallbackQuery):
    if callback.from_user.id not in callback.bot.config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return

    await callback.answer("‚è≥ –û–Ω–æ–≤–ª–µ–Ω–Ω—è trusted –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞–ø—É—â–µ–Ω–æ...", show_alert=True)

    updater = TrustedUserUpdater(
        db_pool=callback.bot.db.pool,
        api_url=callback.bot.config.API_BASE_URL,
        bot=callback.bot
    )


    stats = await updater.update_trusted()

    text = (
        "‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n\n"
        f"üîÑ –û–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ: {stats['processed']}\n"
        f"‚ûï –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏—Ö: {stats['added']}\n"
        f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {stats['notified']}"
    )

    await callback.message.answer(text)



class BroadcastStates(StatesGroup):
    choosing_audience = State() 
    waiting_for_text = State()

# üëâ –ö–Ω–æ–ø–∫–∞ "–†–æ–∑—Å–∏–ª–∫–∞"
@admin_router.callback_query(F.data == "admin_broadcast")
async def handle_broadcast(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –í—Å—ñ–º", callback_data="broadcast_all"),
            InlineKeyboardButton(text="‚úÖ –î–æ–≤—ñ—Ä–µ–Ω–∏–º", callback_data="broadcast_trusted"),
            InlineKeyboardButton(text="üö´ –ù–µ–¥–æ–≤—ñ—Ä–µ–Ω–∏–º", callback_data="broadcast_untrusted"),
        ]
    ])
    await state.set_state(BroadcastStates.choosing_audience)
    await callback.message.answer("–ö–æ–º—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É?", reply_markup=keyboard)
    await callback.answer()

# üëâ –í–∏–±—ñ—Ä –∞—É–¥–∏—Ç–æ—Ä—ñ—ó
@admin_router.callback_query(F.data.startswith("broadcast_"))
async def handle_audience_choice(callback: CallbackQuery, state: FSMContext):
    audience = callback.data.split("_")[1]
    await state.update_data(audience=audience)
    await state.set_state(BroadcastStates.waiting_for_text)
    await callback.message.answer("‚úç –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏ (Markdown –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è):")
    await callback.answer()

# üëâ –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
@admin_router.message(BroadcastStates.waiting_for_text)
async def send_broadcast(message: Message, state: FSMContext):
    data = await state.get_data()
    audience = data.get("audience")
    text = message.text.strip()

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö —é–∑–µ—Ä—ñ–≤ —ñ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ
    all_users = await message.bot.db.get_all_users()
    if audience == "trusted":
        users = [u for u in all_users if u.get("trusted")]
    elif audience == "untrusted":
        users = [u for u in all_users if not u.get("trusted")]
    else:
        users = all_users

    count, fails = 0, 0

    for user in users:
        try:
            await message.bot.send_message(
                chat_id=user['telegram_id'],
                text=text,
                parse_mode="Markdown"
            )
            count += 1
        except Exception as e:
            logger.warning(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è {user['telegram_id']}: {e}")
            fails += 1

    await message.answer(
        f"üì¢ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
        f"‚úÖ –£—Å–ø—ñ—à–Ω–æ: {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        f"‚ùå –§–µ–π–ª—ñ–≤: {fails}"
    )
    await state.clear()



@admin_router.callback_query(F.data == "admin_cleanup")
async def handle_cleanup(callback: CallbackQuery):
    await callback.message.answer("‚ö†Ô∏è –¢–æ—á–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω—ñ –ª–æ—Ç–∏?", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢–∞–∫", callback_data="admin_cleanup_confirm")],
        [InlineKeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_cleanup_cancel")]
    ]))
    await callback.answer()

@admin_router.callback_query(F.data == "clear_queue")
async def clear_queue(callback: CallbackQuery, state: FSMContext):
    deleted_count = await callback.bot.db.clear_pending_lots()
    await callback.message.answer(f"–ß–µ—Ä–≥—É –æ—á–∏—â–µ–Ω–æ. –í–∏–¥–∞–ª–µ–Ω–æ {deleted_count} –ª–æ—Ç—ñ–≤ ‚úÖ")
    await callback.answer()

@admin_router.callback_query(F.data == "admin_cleanup_confirm")
async def confirm_cleanup(callback: CallbackQuery):
    deleted = await callback.bot.db.delete_rejected_lots()
    await callback.answer(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ {deleted} –ª–æ—Ç—ñ–≤", show_alert=True)

@admin_router.callback_query(F.data == "admin_cleanup_cancel")
async def cancel_cleanup(callback: CallbackQuery):
    await callback.answer("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ", show_alert=True)

@admin_router.callback_query(F.data == "admin_ban_perm")
async def ban_user_perm(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = data.get("found_user")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    if not user:
        await callback.message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ!")
        return

    try:
        # –ë–ª–æ–∫—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–∑–∞–≤–∂–¥–∏, –∑–º—ñ–Ω—é—é—á–∏ trusted –Ω–∞ 'banperm'
        await callback.bot.db.update_user_ban(user['id'], trusted='banperm')

        await callback.message.answer("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –Ω–∞–∑–∞–≤–∂–¥–∏.")
        await callback.bot.send_message(user['telegram_id'], 
            "üö´ –í–∞—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –≤ @Wonder_loop_bot. –í–∏ –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ª–æ—Ç–∏. –ü–æ –≤—Å—ñ–º –ø–∏—Ç–∞–Ω–Ω—è–º –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –≤ —á–∞—Ç –∫–∞–Ω–∞–ª—É https://t.me/wonder_loop"
        )

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        await callback.message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

    # –û—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ –∑ FSM
    await state.clear()






@admin_router.callback_query(F.data == "admin_ban_temp")
async def ban_user_temp(callback: CallbackQuery, state: FSMContext):
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ FSM
    data = await state.get_data()
    
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ email/phone/username
    identifier = data.get("identifier")  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –≤ state —î identifier
    user = await callback.bot.db.find_user_by_email_or_phone(identifier)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if not user:
        await callback.message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –¥–ª—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
    banned_until = datetime.utcnow() + timedelta(weeks=2)

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ 2 —Ç–∏–∂–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—ñ, –∑–º—ñ–Ω—é—é—á–∏ trusted
    await callback.bot.db.update_user_ban(user['id'], trusted='bantime')

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–∏–º—á–∞—Å–æ–≤–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
    await callback.message.answer("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –Ω–∞ 2 —Ç–∏–∂–Ω—ñ.")
    
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await callback.bot.send_message(user['telegram_id'], 
        "‚è± –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –≤ @Wonder_loop_bot –Ω–∞ 2 —Ç–∏–∂–Ω—ñ. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –¥–æ—Å—Ç—É–ø –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ –≤—Å—ñ–º –ø–∏—Ç–∞–Ω–Ω—è–º –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –≤ —á–∞—Ç –∫–∞–Ω–∞–ª—É https://t.me/wonder_loop."
    )

    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω FSM
    await state.clear()







@admin_router.callback_query(F.data == "admin_unban")
async def unban_user(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = data.get("found_user")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    if not user:
        await callback.message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ!")
        return  # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î, –ø—Ä–∏–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó

    try:
        # –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∑–º—ñ–Ω—é—é—á–∏ trusted –Ω–∞ 'false'
        await callback.bot.db.update_user_ban(user['id'], trusted='false')

        await callback.message.answer("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        await callback.bot.send_message(user['telegram_id'], 
            "üîì –í–∏ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω—ñ‚≠êÔ∏è. –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∑–Ω–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º."
        )
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        await callback.message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

    # –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–Ω FSM
    await state.clear()




