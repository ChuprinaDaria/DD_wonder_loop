import aiohttp
import logging
import re
import asyncio
import os

logger = logging.getLogger(__name__)

def normalize_phone(phone: str) -> str:
    if not phone or phone.strip() == "":
        return None
    digits = re.sub(r"\D", "", phone)
    if len(digits) == 10 and digits.startswith("0"):
        return "38" + digits
    elif len(digits) == 12 and digits.startswith("380"):
        return digits
    elif len(digits) == 9:
        return "380" + digits
    return digits if len(digits) >= 9 else None

class TrustedUserUpdater:
    def __init__(self, db_pool, api_url, bot):
        self.pool = db_pool
        self.api_url = api_url.rstrip("/")
        self.bot = bot
        self.api_token = None

    async def fetch_token(self):
        try:
            login = os.getenv("API_LOGIN")
            password = os.getenv("API_PASSWORD")
            logger.debug(f"üîê –°–ø—Ä–æ–±–∞ –ª–æ–≥—ñ–Ω—É –∑: {login=}, {password=}")

            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.api_url}/auth/", json={
                    "login": login,
                    "password": password
                }) as resp:
                    if resp.status != 200:
                        raise Exception(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—ñ–Ω—É: {resp.status}")
                    data = await resp.json()
                    if data.get("status") == "OK":
                        self.api_token = data["response"].get("token")
                        logger.info("üîê –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ")
                    else:
                        msg = data.get("response", {}).get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞")
                        raise Exception(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—ñ–Ω—É: {msg}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω: {e}")

    async def fetch_users(self):
        login = os.getenv("API_LOGIN")
        password = os.getenv("API_PASSWORD")
        logger.debug(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∑ –ª–æ–≥—ñ–Ω–æ–º: {login}, –ø–∞—Ä–æ–ª–µ–º: {password}")

        if not self.api_token:
            await self.fetch_token()
            if not self.api_token:
                return []

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.api_url}/users/export/", json={
                    "token": self.api_token
                }) as resp:
                    if resp.status == 401:
                        logger.warning("üîÅ –¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π ‚Äî —Å–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏...")
                        self.api_token = None
                        await self.fetch_token()
                        return await self.fetch_users()

                    if resp.status != 200:
                        raise Exception(f"–ü–æ–º–∏–ª–∫–∞ HTTP: {resp.status}")

                    data = await resp.json()

                # üêû –õ–æ–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API
                    logger.debug(f"üì¶ API –≤—ñ–¥–ø–æ–≤—ñ–≤: {data}")

                    if data.get("status") != "OK":
                        msg = data.get("response", {}).get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞")
                        raise Exception(f"–°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API: {data.get('status')} ‚Äî {msg}")

                    users = data.get("response", {}).get("users", [])
                    logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ API")
                    return users

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ API: {e}")
            return []

    async def update_trusted(self):
        api_users = await self.fetch_users()
        if not api_users:
            logger.warning("‚ö†Ô∏è –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ API")
            return {"processed": 0, "added": 0, "notified": 0}

        async with self.pool.acquire() as conn:
            processed_count = 0
            added_to_trusted = 0
            updated_existing = 0

            for user in api_users:
                if not isinstance(user, dict):
                    continue

                raw_phone = user.get("phone")
                raw_email = user.get("email")

                normalized_phone = normalize_phone(raw_phone)
                email = raw_email.strip().lower() if raw_email else None

                if not normalized_phone and not email:
                    continue

                processed_count += 1

                # üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ trusted_exists ‚Äî –±–µ–∑ –≥–ª—é–∫—ñ–≤ –∑ NULL
                trusted_exists = None

                if normalized_phone and email:
                    trusted_exists = await conn.fetchrow("""
                        SELECT id FROM trusted_users
                        WHERE regexp_replace(phone, '\\D', '', 'g') = regexp_replace($1, '\\D', '', 'g')
                        OR LOWER(email) = LOWER($2)
                    """, normalized_phone, email)

                elif normalized_phone:
                    trusted_exists = await conn.fetchrow("""
                        SELECT id FROM trusted_users
                        WHERE regexp_replace(phone, '\\D', '', 'g') = regexp_replace($1, '\\D', '', 'g')
                    """, normalized_phone)

                elif email:
                    trusted_exists = await conn.fetchrow("""
                        SELECT id FROM trusted_users
                        WHERE LOWER(email) = LOWER($1)
                    """, email)

                if not trusted_exists:
                    await conn.execute("""
                        INSERT INTO trusted_users (phone, email)
                        VALUES ($1, $2)
                    """, raw_phone, raw_email)
                    added_to_trusted += 1

                # üîÅ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —É users
                await conn.execute("""
                    UPDATE users
                    SET trusted = 'true', daily_limit = 10
                    WHERE trusted = 'false' AND (
                        (regexp_replace(phone, '\\D', '', 'g') = regexp_replace($1, '\\D', '', 'g') AND $1 IS NOT NULL)
                        OR (LOWER(email) = LOWER($2) AND $2 IS NOT NULL)
                    )
                """, normalized_phone, email)

                # üì© –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                updated_user_ids = await conn.fetch("""
                    SELECT telegram_id FROM users
                    WHERE trusted = 'true' AND (
                        (regexp_replace(phone, '\\D', '', 'g') = regexp_replace($1, '\\D', '', 'g') AND $1 IS NOT NULL)
                        OR (LOWER(email) = LOWER($2) AND $2 IS NOT NULL)
                )
                """, normalized_phone, email)

                for user_row in updated_user_ids:
                    if user_row["telegram_id"]:
                        try:
                            await self.bot.send_message(
                                chat_id=user_row["telegram_id"],
                                text="üåü –í–∞—à —Å—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ! –í–∏ —Å—Ç–∞–ª–∏ –¥–æ–≤—ñ—Ä–µ–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º, Wonder Trust üéâ"
                            )            
                            updated_existing += 1
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_row['telegram_id']}: {e}")


            logger.info(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ: {processed_count}")
            logger.info(f"‚ûï –î–æ–¥–∞–Ω–æ –¥–æ trusted_users: {added_to_trusted}")
            logger.info(f"üîî –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {updated_existing}")

            return {
                "processed": processed_count,
                "added": added_to_trusted,
                "notified": updated_existing
            }
