import openai
import random
from google.cloud import vision
import aiohttp
import tempfile
import os
from PIL import Image, ImageStat, ImageDraw, ImageFont, ImageEnhance
from aiogram.types import FSInputFile
import re
import asyncio
from aiogram import Bot
from openai import AsyncOpenAI 
import httpx
import cv2
import numpy as np


import openai
import re
import random

class OpenAIService:
    def __init__(self, api_key):
        self.http_client = httpx.AsyncClient()  # ‚Üê –∫–∞—Å—Ç–æ–º–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –±–µ–∑ –ø—Ä–æ–∫—Å—ñ
        self.client = AsyncOpenAI(
            api_key=api_key,
            http_client=self.http_client
        )

    async def close(self):
        await self.http_client.aclose()  

    def _get_category_emoji(self, category: str) -> str:
        mapping = {
            "–¥–æ–≥–ª—è–¥ –∑–∞ –æ–±–ª–∏—á—á—è–º": "üß¥",
            "–¥–æ–≥–ª—è–¥ –∑–∞ —Ç—ñ–ª–æ–º": "üßº",
            "–¥–æ–≥–ª—è–¥ –∑–∞ –≤–æ–ª–æ—Å—Å—è–º": "üßñ‚Äç‚ôÄÔ∏è",
            "–≥–∞–¥–∂–µ—Ç–∏": "‚öôÔ∏è"
        }
        return mapping.get(category.strip().lower(), "‚ú®")

    def _clean_telegram_text(self, text: str) -> str:
        # –ù–ï –≤–∏–¥–∞–ª—è—î–º–æ –∑—ñ—Ä–æ—á–∫–∏ (*) –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –≤ Telegram
        cleaned = re.sub(r'[_`]', '', text)  # –í–∏–¥–∞–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è —Ç–∞ –∫–æ–¥
        cleaned = re.sub(r'\[.+?\]\(.+?\)', '', cleaned)  # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        return cleaned.strip()

    def _select_hashtags(self, data: dict) -> str:
        """–í–∏–±–∏—Ä–∞—î 3 —Ä–∞–Ω–¥–æ–º–Ω—ñ —Ö–µ—à—Ç–µ–≥–∏ –∑ –Ω–∞—è–≤–Ω–∏—Ö"""
        all_tags = [
            "#–∑_–ª—é–±–æ–≤ º—é_–≤—ñ–¥–ø—É—Å–∫–∞—é",
            "#–π–æ–π_–Ω–µ_–º–æ—î", 
            "#–Ω—é—Ö–æ–≤—ñ_—Ç—Ä–∞–≤–º–∏",
            "#–≤—ñ–¥–∫—Ä–∏—Ç–∏–π_–∞–ª–µ_–∂–∏–≤–∏–π",
            "#–æ–±–µ—Ä–µ–∂–Ω–æ_—Ç–µ–∫—Å—Ç—É—Ä–∞",
            "#—à–æ—Å—å_–Ω–µ–ø–æ–Ω—è—Ç–Ω–µ_–Ω–∞_–¥–æ—Ç–∏–∫",
            "#–ø–µ—Ä–µ–∂–∏–≤_–ø–µ—Ä–µ—ó–∑–¥",
            "#–≤–ø–∞–≤_—ñ_–ø–æ–¥—Ä—è–ø–∞–≤—Å—è",
            "#–π–æ–π_—á—É—Ç–ª–∏–≤—ñ_—Ç–µ—Ä–º—ñ–Ω–∏"
        ]
        
        # –í–∏–±–∏—Ä–∞—î–º–æ 3 –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –≤–∞—Ä—ñ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        selected = random.sample(all_tags, min(3, len(all_tags)))
        return ' '.join(selected)

    def _format_dates_creatively(self, opened_at: str, expire_at: str) -> str:
        """–°—Ç–≤–æ—Ä—é—î –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π –æ–ø–∏—Å –¥–∞—Ç –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è"""
        try:
            import re
            
            # –í–∏—Ç—è–≥—É—î–º–æ —Ä–æ–∫–∏ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
            opened_year = None
            expire_year = None
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä—ñ–∫ —É opened_at
            opened_match = re.search(r'20\d{2}', opened_at)
            if opened_match:
                opened_year = int(opened_match.group())
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä—ñ–∫ —É expire_at
            expire_match = re.search(r'20\d{2}', expire_at)
            if expire_match:
                expire_year = int(expire_match.group())
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –∫–ª—ñ—î–Ω—Ç–∞ + –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π –∂–∞—Ä—Ç
            if opened_year and expire_year:
                years_left = expire_year - 2025  # –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫
                
                if years_left > 0:
                    joke = f"–∂–∏–≤–µ {years_left} {'—Ä—ñ–∫' if years_left == 1 else '—Ä–æ–∫–∏'}"
                elif years_left == 0:
                    joke = "–æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—ñ–∫, —Ç—Ä–∏–º–∞—î—Ç—å—Å—è"
                else:
                    joke = "—Ç–µ—Ä–º—ñ–Ω –º–∏–Ω—É–≤, –∞–ª–µ —â–µ –¥–∏—Ö–∞—î"
                    
                return f"–≤—ñ–¥–∫—Ä–∏—Ç–∏–π {opened_at}, –¥—ñ—î –¥–æ {expire_at} ({joke})"
                
            elif "–∑–∞–∫—Ä–∏—Ç–æ" in opened_at.lower() or "–∑–∞–∫—Ä–∏—Ç" in opened_at.lower():
                return f"{opened_at}, –¥–æ {expire_at} (—Å–ø–∏—Ç—å —è–∫ –∫—Ä–∞—Å—É–Ω—è)"
            
            elif not opened_year and not expire_year:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ä–æ–∫—ñ–≤ –≤–∑–∞–≥–∞–ª—ñ
                return f"{opened_at}, –¥–æ {expire_at} (–≤ —Ç–∞–∫–æ–º—É —Å—Ç–∏–ª—ñ)"
                
            else:
                # –Ø–∫—â–æ —î —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä—ñ–∫
                return f"{opened_at}, –¥–æ {expire_at} (—Ç—Ä–∏–º–∞—î—Ç—å—Å—è —è–∫ –º–æ–∂–µ)"
                
        except Exception as e:
            # –§–æ–ª–ª–±–µ–∫ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
            return f"{opened_at}, –¥–æ {expire_at}"

    def _determine_sale_or_exchange(self, data: dict) -> tuple[bool, bool]:
        """–í–∏–∑–Ω–∞—á–∞—î —á–∏ —Ü–µ –ø—Ä–æ–¥–∞–∂ —á–∏ –æ–±–º—ñ–Ω –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—è–≤–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥–∞–Ω—ñ –ø—Ä–æ —Ü—ñ–Ω–∏
        has_price_data = (
            data.get('price_buy') is not None and 
            data.get('price_sell') is not None and
            str(data.get('price_buy', '')).strip() != '' and
            str(data.get('price_sell', '')).strip() != ''
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥–∞–Ω—ñ –ø—Ä–æ –æ–±–º—ñ–Ω
        exchange_details = data.get('exchange_details', '').strip()
        has_exchange_data = (
            exchange_details and 
            exchange_details.lower() not in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', '–Ω–µ–º–∞—î', '']
        )
        
        return has_price_data, has_exchange_data

    def _generate_price_line(self, data: dict) -> str:
        """–ì–µ–Ω–µ—Ä—É—î —Ä—è–¥–æ–∫ –∑ —Ü—ñ–Ω–æ—é"""
        price_buy = data.get('price_buy', '')
        price_sell = data.get('price_sell', '')
        
        # –í–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–æ—Ç–µ–ø–Ω–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è —Ü—ñ–Ω–∏
        price_comments = [
            "–≤—ñ–¥–ø—É—â—É –≤ –ª—é–¥–∏ –∑–∞ —Å–∏–º–≤–æ–ª—ñ—á–Ω—É –ø–ª–∞—Ç—É",
            "–Ω–µ—Ö–∞–π –∂–∏–≤–µ —É –∫–æ–≥–æ—Å—å —ñ–Ω—à–æ–≥–æ",
            "–≤—ñ–¥–¥–∞—é –º–∞–π–∂–µ –∑–∞–¥–∞—Ä–º–∞",
            "—Ö–æ—á —â–æ—Å—å –ø–æ–≤–µ—Ä–Ω—É—Ç–∏",
            "–∫—Ä–∞—â–µ –≤ –¥–æ–±—Ä—ñ —Ä—É–∫–∏ –Ω—ñ–∂ –≤ —à—É—Ö–ª—è–¥—É",
            "–ø—Ä–æ–¥–∞—é –∑—ñ –∑–Ω–∏–∂–∫–æ—é –Ω–∞ —Ä–æ–∑—á–∞—Ä—É–≤–∞–Ω–Ω—è"
        ]
        
        comment = random.choice(price_comments)
        return f"‚Ä¢ –¶—ñ–Ω–∞: –ö—É–ø—É–≤–∞–ª–∞ –∑–∞ {price_buy} –≥—Ä–Ω, –≤—ñ–¥–¥–∞—é –∑–∞ {price_sell} –≥—Ä–Ω ({comment})"

    def _generate_exchange_line(self, data: dict) -> str:
        """–ì–µ–Ω–µ—Ä—É—î —Ä—è–¥–æ–∫ –∑ –æ–±–º—ñ–Ω–æ–º"""
        exchange_details = data.get('exchange_details', '').strip()
        
        # –í–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–æ—Ç–µ–ø–Ω–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è –æ–±–º—ñ–Ω—É
        exchange_comments = [
            "–º–æ–∂–µ —Ö—Ç–æ—Å—å –º–∞—î —Å–∞–º–µ —Ç–µ —â–æ —Ç—Ä–µ–±–∞",
            "–±–∞—Ä—Ç–µ—Ä —è–∫ —É –¥–∞–≤–Ω—ñ —á–∞—Å–∏",
            "–æ–±–º—ñ–Ω –±–µ–∑ –¥–æ–ø–ª–∞—Ç —ñ –Ω–µ—Ä–≤—ñ–≤",
            "–º–æ–∂–ª–∏–≤–æ –∫–æ–º—É—Å—å –ø—ñ–¥—ñ–π–¥–µ –∫—Ä–∞—â–µ",
            "—à—É–∫–∞—é –≤–∑–∞—î–º–æ–≤–∏–≥—ñ–¥–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç"
        ]
        
        comment = random.choice(exchange_comments)
        return f"‚Ä¢ –û–±–º—ñ–Ω: {exchange_details} ({comment})"

    async def generate_post_text(self, data: dict) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –≤–µ—Å—å –ø–æ—Å—Ç —á–µ—Ä–µ–∑ GPT –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏"""
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
        emoji = self._get_category_emoji(data['category'])
        formatted_dates = self._format_dates_creatively(
            data.get('opened_at', ''), 
            data.get('expire_at', '')
        )
        hashtags = self._select_hashtags(data)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω—ñ —Ö–µ—à—Ç–µ–≥–∏
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó (–ø—Ä–æ–¥–∞–∂ —á–∏ –æ–±–º—ñ–Ω)
        is_sale, is_exchange = self._determine_sale_or_exchange(data)
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è —Ü—ñ–Ω–∏/–æ–±–º—ñ–Ω—É
        if is_sale:
            price_exchange_line = self._generate_price_line(data)
        elif is_exchange:
            price_exchange_line = self._generate_exchange_line(data)
        else:
            # Fallback —è–∫—â–æ –Ω–µ–º–∞—î –Ω—ñ —Ü—ñ–Ω–∏ –Ω—ñ –æ–±–º—ñ–Ω—É
            price_exchange_line = "‚Ä¢ –¶—ñ–Ω–∞: –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞ (–ø–∏—à—ñ—Ç—å, –¥–æ–º–æ–≤–∏–º–æ—Å—è)"

        system_prompt = """–¢–∏ –∞–¥–∞–ø—Ç—É—î—à –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Å–º–µ—Ç–∏—á–Ω–∏–π –∑–∞—Å—ñ–± —É —ñ—Ä–æ–Ω—ñ—á–Ω–æ-—Ä–æ–∑—á–∞—Ä–æ–≤–∞–Ω–∏–π —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ–¥–∞–∂—É –±/—É –∫–æ—Å–º–µ—Ç–∏–∫–∏.

–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û - –°–¢–†–£–ö–¢–£–†–ê –í–ò–í–û–î–£:
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –û–ë–û–í'–Ø–ó–ö–û–í–ê (–∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ –∑ "‚Ä¢ "):
{emoji} *{–Ω–∞–∑–≤–∞}*
‚Ä¢ –ó–∞–ª–∏—à–æ–∫: {–≤—ñ–¥—Å–æ—Ç–æ–∫}% ({–º–µ—Ç–∞—Ñ–æ—Ä–∞})
‚Ä¢ –í—ñ–¥–∫—Ä–∏—Ç–æ: {–∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π –æ–ø–∏—Å –¥–∞—Ç}
‚Ä¢ –ß–æ–º—É –ø—Ä–æ–¥–∞—é: {—ñ—Ä–æ–Ω—ñ—á–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞}
‚Ä¢ –ü—Ä–æ –∑–∞—Å—ñ–±: {—Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–∏–π –æ–ø–∏—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞}
‚Ä¢ –®–∫—ñ—Ä–∞: {—Å—Ç–∏–ª—å —Ç–∏–ø—É —à–∫—ñ—Ä–∏}
{—Ä—è–¥–æ–∫ –∑ —Ü—ñ–Ω–æ—é –∞–±–æ –æ–±–º—ñ–Ω–æ–º - –í–°–¢–ê–í–ò–¢–ò –ë–ï–ó –ó–ú–Ü–ù}
‚Ä¢ –õ–æ–∫–∞—Ü—ñ—è: {–º—ñ—Å—Ç–æ}, –¥–æ—Å—Ç–∞–≤–∫–∞: {–¥–æ—Å—Ç–∞–≤–∫–∞ –∑ –≥—É–º–æ—Ä–æ–º}

{—Ö–µ—à—Ç–µ–≥–∏ –≤ –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É}

–§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø:
- –ù–∞–∑–≤–∞ –û–ë–û–í'–Ø–ó–ö–û–í–û –≤ –∑—ñ—Ä–æ—á–∫–∞—Ö: *–Ω–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É*
- –•–µ—à—Ç–µ–≥–∏ –∑–∞–≤–∂–¥–∏ –≤ –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É –≤ –∫—ñ–Ω—Ü—ñ
- –ó–±–µ—Ä—ñ–≥–∞–π –≤—Å—ñ –∑—ñ—Ä–æ—á–∫–∏ –Ω–∞–≤–∫–æ–ª–æ –Ω–∞–∑–≤–∏

–°–¢–ò–õ–¨:
- –Ü—Ä–æ–Ω—ñ—è —Ç–∞ –ª–µ–≥–∫–µ —Ä–æ–∑—á–∞—Ä—É–≤–∞–Ω–Ω—è
- –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è ("–º–æ—è —à–∫—ñ—Ä–∞", "–æ—Å–æ–±–∏—Å—Ç–æ –º–µ–Ω–µ")
- –ú–µ—Ç–∞—Ñ–æ—Ä–∏ –∑ –∂–∏—Ç—Ç—è
- –ì—É–º–æ—Ä –±–µ–∑ —Å–ø–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–∫—Ç—ñ–≤
- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—Å—ñ—î—ó —Ñ–∞–∫—Ç–∏—á–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó

–ú–ï–¢–ê–§–û–†–ò –î–õ–Ø –ó–ê–õ–ò–®–ö–£:
95-100%: "—Å—Ç–æ—è–ª–∞ —è–∫ –∑–∞–ø–∞—Å–∫–∞", "–Ω–æ–≤–∞, –∞–ª–µ –Ω–µ –∑—ñ–π—à–ª–∏—Å—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞–º–∏"
90-95%: "–≤—Å–µ —â–µ –±–æ–π–æ–≤–∞", "–º–∞–π–∂–µ –Ω–µ–¥–æ—Ç–æ—Ä–∫–∞–Ω–∞"
80-90%: "–≤—ñ–¥–∫—Ä–∏–≤–∞–ª–∞ –æ–±–µ—Ä–µ–∂–Ω–æ", "–ø–∞—Ä—É —Ä–∞–∑—ñ–≤ —Å–ø—Ä–æ–±—É–≤–∞–ª–∞"
70-80%: "–º–∞–∑–∞–ª–∞—Å—å –¥–µ–∫—ñ–ª—å–∫–∞ —Ä–∞–∑", "—â–µ –ø–∞—Ö–Ω–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é"
60-70%: "—Ç—Ä—ñ—à–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–ª–∞—Å—å", "—â–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
40-60%: "–¥–µ—Å—å –ø—ñ–¥ –ø–æ–ª–æ–≤–∏–Ω—É", "—î —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏"
20-40%: "—â–µ —î –∂–∏—Ç—Ç—è", "–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ"
10-20%: "–Ω–µ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ, –∞–ª–µ –π –Ω–µ –≤ –∞—Ä—Ö—ñ–≤—ñ"
5-10%: "–±–∞–Ω–∫–∞ –Ω–µ –ø–æ—Ä–æ–∂–Ω—è", "–∑–∞–ª–∏—à–∏–ª–æ—Å—å –Ω–∞ —Å–ø–æ–º–∏–Ω"
<5%: "–º—ñ–Ω—ñ–º–∞–ª–æ—á–∫–∞", "—Å–∏–º–≤–æ–ª—ñ—á–Ω–æ"

–¢–ò–ü–ò –®–ö–Ü–†–ò (–¥–ª—è –ø–æ–ª—è "‚Ä¢ –®–∫—ñ—Ä–∞:"):
- —Å—É—Ö–∞: "—Å—É—Ö–∞, —è–∫ —á–∞—Ç —É —Ä–æ–±–æ—á—É —Å—É–±–æ—Ç—É"
- –∂–∏—Ä–Ω–∞: "–∂–∏—Ä–Ω–∞, –∞–ª–µ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è —Ç—Ä–∏–º–∞—Ç–∏—Å—å"
- –∑–º—ñ—à–∞–Ω–∞: "–∑–º—ñ—à–∞–Ω–∞, —è–∫ –Ω–∞—Å—Ç—Ä—ñ–π —É –ø–æ–Ω–µ–¥—ñ–ª–æ–∫"  
- —á—É—Ç–ª–∏–≤–∞: "—á—É—Ç–ª–∏–≤–∞, –∞–ª–µ –±–µ–∑ –¥—Ä–∞–º–∏"
- –Ω–æ—Ä–º–∞–ª—å–Ω–∞: "–Ω–æ—Ä–º–∞–ª—å–Ω–∞ (—Ä—ñ–¥–∫—ñ—Å—Ç—å —É –Ω–∞—à —á–∞—Å)"

–î–ê–¢–ò: –û–±–æ–≤'—è–∑–∫–æ–≤–æ –∞–¥–∞–ø—Ç—É–π –¥–∞—Ç–∏ –∑ –≥—É–º–æ—Ä–æ–º:
- "–≤—ñ–¥–∫—Ä–∏—Ç–∏–π 2023, –∞–ª–µ —â–µ —Ç—Ä–∏–º–∞—î—Ç—å—Å—è –¥–æ 2026" (–∑–º—ñ–Ω–∏ —Ä–æ–∫–∏ –Ω–∞ —Ç—ñ —â–æ –Ω–∞–¥–∞–Ω—ñ)
- "–∂–∏–≤–µ —â–µ 3 —Ä–æ–∫–∏" (—Ä–∞—Ö—É–π —Ä—ñ–∑–Ω–∏—Ü—é)
- "–≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ä—ñ–∫ —Ç–æ–º—É, —Ç–µ—Ä–º—ñ–Ω —â–µ –Ω–µ –¥–∏—Ö–∞—î –Ω–∞ —Å–ø–∏–Ω—É"

–õ–û–ö–ê–¶–Ü–Ø: –û–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–æ–¥–∞–π –≥—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä:
- "–û–¥–µ—Å–∞, –¥–æ—Å—Ç–∞–≤–∫–∞: üì¶ –ù–æ–≤–∞ –ü–æ—à—Ç–∞ (—è–∫ –∑–∞–≤–∂–¥–∏)"
- "–ö–∏—ó–≤, –¥–æ—Å—Ç–∞–≤–∫–∞: üìÆ –£–∫—Ä–ø–æ—à—Ç–∞ (–∫–æ–ª–∏ –¥–æ—á–µ–∫–∞—î–º–æ—Å—å)"
- "–õ—å–≤—ñ–≤, –¥–æ—Å—Ç–∞–≤–∫–∞: üöö –±—É–¥—å-—è–∫–∞ (–∞–±–∏ –¥—ñ–π—à–ª–∞)"

–ß–û–ú–£ –ü–†–û–î–ê–Æ: –û–±–æ–≤'—è–∑–∫–æ–≤–æ –∞–¥–∞–ø—Ç—É–π –ø—Ä–∏—á–∏–Ω—É –∑ —ñ—Ä–æ–Ω—ñ—î—é:
- "–ù–µ –∫–æ—Ä–∏—Å—Ç—É—é—Å—å" ‚Üí "—Å—Ç–æ—ó—Ç—å —ñ –¥–∏–≤–∏—Ç—å—Å—è –Ω–∞ –º–µ–Ω–µ –∑ –¥–æ–∫–æ—Ä–æ–º"
- "–ù–∞–±—Ä–∏–¥" ‚Üí "–Ω–∞—à—ñ —Å—Ç–æ—Å—É–Ω–∫–∏ –∑–∞–π—à–ª–∏ –≤ –≥–ª—É—Ö–∏–π –∫—É—Ç"
- "–ù–µ –º–æ—î" ‚Üí "–Ω–µ –∑—ñ–π—à–ª–∏—Å—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞–º–∏ –∑ –ø–µ—Ä—à–æ–≥–æ –¥–æ—Ç–∏–∫—É"

–ü–†–û –ó–ê–°–Ü–ë: –ù–ï –≤–∏–≥–∞–¥—É–π —Ä–µ–∫–ª–∞–º–Ω–∏–π —Ç–µ–∫—Å—Ç! –°—Ç–∏–ª—ñ–∑—É–π –¢–ï, –©–û –ù–ê–ü–ò–°–ê–í –ö–û–†–ò–°–¢–£–í–ê–ß:
- –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤ "–î–æ–±—Ä–∏–π –∫—Ä–µ–º –¥–ª—è —Å—É—Ö–æ—ó —à–∫—ñ—Ä–∏" ‚Üí "–∫—Ä–µ–º –∑ –∞–º–±—ñ—Ü—ñ—è–º–∏ –¥–ª—è —Å—É—Ö–æ—ó —à–∫—ñ—Ä–∏ (–Ω–µ –¥–ª—è –º–æ—î—ó)"
- –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤ "–°–∏—Ä–æ–≤–∞—Ç–∫–∞ –∑ –≤—ñ—Ç–∞–º—ñ–Ω–æ–º –°" ‚Üí "—Å–∏—Ä–æ–≤–∞—Ç–∫–∞ –∑ –≤—ñ—Ç–∞–º—ñ–Ω–æ–º –° —ñ –≤–µ–ª–∏–∫–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏"
- –ó–ê–í–ñ–î–ò –∑–±–µ—Ä—ñ–≥–∞–π —Ñ–∞–∫—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Ç—ñ–ª—å–∫–∏ –¥–æ–¥–∞–≤–∞–π –≥—É–º–æ—Ä

–í–ê–ñ–õ–ò–í–û: –†—è–¥–æ–∫ –∑ —Ü—ñ–Ω–æ—é/–æ–±–º—ñ–Ω–æ–º –í–°–¢–ê–í–õ–Ø–ô –ë–ï–ó –ñ–û–î–ù–ò–• –ó–ú–Ü–ù!

–û–ë–ú–ï–ñ–ï–ù–ù–Ø: –í–µ—Å—å —Ç–µ–∫—Å—Ç —Ä–∞–∑–æ–º –∑ —Ö–µ—à—Ç–µ–≥–∞–º–∏ ‚â§950 —Å–∏–º–≤–æ–ª—ñ–≤!"""

        user_prompt = f"""–ê–¥–∞–ø—Ç—É–π —Ü—ñ –¥–∞–Ω—ñ –ø—ñ–¥ –Ω–∞—à —Å—Ç–∏–ª—å:

–î–ê–ù–Ü:
–ù–∞–∑–≤–∞: {data['title']}
–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {data['category']}
–ó–∞–ª–∏—à–æ–∫: {data.get('left_percent', 0)}%
–î–∞—Ç–∏: {formatted_dates}
–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {data.get('reason', '')}
–û–ø–∏—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {data.get('description', '')}
–¢–∏–ø —à–∫—ñ—Ä–∏: {data.get('skin_type', '')}
–ú—ñ—Å—Ç–æ: {data.get('city', '')}
–î–æ—Å—Ç–∞–≤–∫–∞: {data.get('delivery', '')}

–†–Ø–î–û–ö –¶–Ü–ù–ò/–û–ë–ú–Ü–ù–£ (–≤—Å—Ç–∞–≤–∏—Ç–∏ –ë–ï–ó –ó–ú–Ü–ù):
{price_exchange_line}

–•–ï–®–¢–ï–ì–ò (–≤—Å—Ç–∞–≤–∏—Ç–∏ –≤ –∫—ñ–Ω—Ü—ñ –≤ –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É):
{hashtags}

–ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç —É –≤–∫–∞–∑–∞–Ω—ñ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ, –ë–ï–ó –ø–æ—è—Å–Ω–µ–Ω—å."""

        try:
            response = await self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=800,
                temperature=0.7  # –ë–∞–ª–∞–Ω—Å –º—ñ–∂ —Ç–≤–æ—Ä—á—ñ—Å—Ç—é —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—é
            )
            
            result = response.choices[0].message.content.strip()
            
            # –ù–ï –æ—á–∏—â–∞—î–º–æ –∑—ñ—Ä–æ—á–∫–∏ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
            result = re.sub(r'[_`]', '', result)  # –í–∏–¥–∞–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è —Ç–∞ –∫–æ–¥
            result = re.sub(r'\[.+?\]\(.+?\)', '', result)  # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            
            # –î–æ–¥–∞—î–º–æ –µ–º–æ–¥–∂—ñ –¥–æ –Ω–∞–∑–≤–∏, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
            if not result.startswith(emoji):
                lines = result.split('\n')
                if lines[0] and not any(e in lines[0] for e in ['üß¥', 'üßº', 'üßñ‚Äç‚ôÄÔ∏è', '‚öôÔ∏è', '‚ú®']):
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞–∑–≤–∞ –≤–∂–µ –≤ –∑—ñ—Ä–æ—á–∫–∞—Ö
                    if '*' in lines[0]:
                        lines[0] = f"{emoji} {lines[0]}"
                    else:
                        lines[0] = f"{emoji} *{lines[0]}*"
                    result = '\n'.join(lines)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ö–µ—à—Ç–µ–≥–∏ –≤ –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É –≤ –∫—ñ–Ω—Ü—ñ
            if hashtags not in result:
                result += f"\n\n{hashtags}"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Ç–∞ —Å–∫–æ—Ä–æ—á—É—î–º–æ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if len(result) > 950:
                lines = result.split('\n')
                # –°–∫–æ—Ä–æ—á—É—î–º–æ –æ–ø–∏—Å –∑–∞—Å–æ–±—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                for i, line in enumerate(lines):
                    if line.startswith('‚Ä¢ –ü—Ä–æ –∑–∞—Å—ñ–±:') and len(result) > 950:
                        # –°–∫–æ—Ä–æ—á—É—î–º–æ –æ–ø–∏—Å
                        desc_part = line.split(':', 1)[1].strip()
                        if len(desc_part) > 50:
                            desc_part = desc_part[:47] + '...'
                            lines[i] = f"‚Ä¢ –ü—Ä–æ –∑–∞—Å—ñ–±: {desc_part}"
                            result = '\n'.join(lines)
                            break
                
                # –Ø–∫—â–æ –≤—Å–µ —â–µ –¥–æ–≤–≥–∏–π, –æ–±—Ä—ñ–∑–∞—î–º–æ –≤ –∫—ñ–Ω—Ü—ñ
                if len(result) > 950:
                    result = result[:947] + '...'
            
            return result
            
        except Exception as e:
            print(f"‚ùå Error generating post: {e}")
            return self._generate_fallback_post(data)

    def _generate_fallback_post(self, data: dict) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ—Å—Ç–∞"""
        emoji = self._get_category_emoji(data['category'])
        formatted_dates = self._format_dates_creatively(
            data.get('opened_at', ''), 
            data.get('expire_at', '')
        )
        
        # –ë–∞–∑–æ–≤–∞ –º–µ—Ç–∞—Ñ–æ—Ä–∞ –¥–ª—è –∑–∞–ª–∏—à–∫—É
        percent = int(data.get('left_percent', 0))
        if percent >= 95:
            condition = "—Å—Ç–æ—è–ª–∞ —è–∫ –∑–∞–ø–∞—Å–∫–∞, –∞–ª–µ –Ω–µ –∑—ñ–π—à–ª–∏—Å—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞–º–∏"
        elif percent >= 80:
            condition = "–≤—ñ–¥–∫—Ä–∏–≤–∞–ª–∞ –æ–±–µ—Ä–µ–∂–Ω–æ"
        elif percent >= 50:
            condition = "–¥–µ—Å—å –ø—ñ–¥ –ø–æ–ª–æ–≤–∏–Ω—É"
        elif percent >= 20:
            condition = "—â–µ —î –∂–∏—Ç—Ç—è"
        else:
            condition = "–∑–∞–ª–∏—à–∏–ª–æ—Å—å –Ω–∞ —Å–ø–æ–º–∏–Ω"
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó
        is_sale, is_exchange = self._determine_sale_or_exchange(data)
        
        lines = [
            f"{emoji} *{data['title']}*",  # –ù–∞–∑–≤–∞ –≤ –∑—ñ—Ä–æ—á–∫–∞—Ö
            f"‚Ä¢ –ó–∞–ª–∏—à–æ–∫: {percent}% ({condition})",
            f"‚Ä¢ –í—ñ–¥–∫—Ä–∏—Ç–æ: {formatted_dates}",
            f"‚Ä¢ –ß–æ–º—É –ø—Ä–æ–¥–∞—é: {data.get('reason', '–Ω–µ –º–æ—î')}",
            f"‚Ä¢ –ü—Ä–æ –∑–∞—Å—ñ–±: {data.get('description', '–∑–∞—Å—ñ–± –∑ –∞–º–±—ñ—Ü—ñ—è–º–∏')}",
            f"‚Ä¢ –®–∫—ñ—Ä–∞: {data.get('skin_type', '—Ä—ñ–∑–Ω–∞')}"
        ]
        
        # –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ –∑ —Ü—ñ–Ω–æ—é –∞–±–æ –æ–±–º—ñ–Ω–æ–º
        if is_sale:
            lines.append(self._generate_price_line(data))
        elif is_exchange:
            lines.append(self._generate_exchange_line(data))
        else:
            lines.append("‚Ä¢ –¶—ñ–Ω–∞: –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞ (–ø–∏—à—ñ—Ç—å, –¥–æ–º–æ–≤–∏–º–æ—Å—è)")
        
        lines.append(f"‚Ä¢ –õ–æ–∫–∞—Ü—ñ—è: {data.get('city', '')}, –¥–æ—Å—Ç–∞–≤–∫–∞: {data.get('delivery', '')}")
        
        # –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ —Ç–∞ —Ö–µ—à—Ç–µ–≥–∏
        lines.append("")
        lines.append(self._select_hashtags(data))
        
        result = '\n'.join(lines)
        return result[:950] if len(result) > 950 else result






    


class GoogleVisionService:
    def __init__(self, service_account_path: str):
        self.client = vision.ImageAnnotatorClient.from_service_account_file(service_account_path)

    async def validate_photo(self, file_id: str, bot) -> tuple[bool, str]:
        """–ñ–æ—Ä—Å—Ç–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º"""
        print("üîç [Vision] –ü–æ—á–∏–Ω–∞—î–º–æ –∂–æ—Ä—Å—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ñ–æ—Ç–æ...")

        try:
            file = await bot.get_file(file_id)
            file_path = file.file_path
            photo_url = f"https://api.telegram.org/file/bot{bot.token}/{file_path}"

            print(f"üì• [Vision] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –∑: {photo_url}")
            async with aiohttp.ClientSession() as session:
                async with session.get(photo_url) as resp:
                    if resp.status != 200:
                        print(f"‚ùå [Vision] –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ. –°—Ç–∞—Ç—É—Å: {resp.status}")
                        return False, "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"
                    content = await resp.read()

            with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as temp_file:
                temp_file.write(content)
                image_path = temp_file.name

            # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è—Å–∫—Ä–∞–≤–æ—Å—Ç—ñ —Ç–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É
            brightness_ok, brightness_reason = self._check_brightness_and_contrast(image_path)
            if not brightness_ok:
                os.remove(image_path)
                return False, brightness_reason

            # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ–Ω—É
            background_ok, background_reason = self._check_background_quality(image_path)
            if not background_ok:
                os.remove(image_path)
                return False, background_reason

            # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ Google Vision API
            vision_ok, vision_reason = await self._check_with_vision_api(content)
            if not vision_ok:
                os.remove(image_path)
                return False, vision_reason

            # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ —Ç—ñ–ª–∞/–æ–±–ª–∏—á—á—è
            body_ok, body_reason = await self._check_body_parts(content)
            if not body_ok:
                os.remove(image_path)
                return False, body_reason

            # 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª—å–æ—Ä–æ–≤–æ—ó –≥–∞–º–∏
            color_ok, color_reason = self._check_color_distribution(image_path)
            if not color_ok:
                os.remove(image_path)
                return False, color_reason

            os.remove(image_path)
            print("‚úÖ [Vision] –§–æ—Ç–æ –ø—Ä–æ–π—à–ª–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
            return True, "–§–æ—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º"

        except Exception as e:
            print(f"‚ùå [Vision] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ: {e}")
            return False, f"–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}"

    def _check_brightness_and_contrast(self, image_path: str) -> tuple[bool, str]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è—Å–∫—Ä–∞–≤–æ—Å—Ç—ñ —Ç–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É"""
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ OpenCV –¥–ª—è –±—ñ–ª—å—à —Ç–æ—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            img = cv2.imread(image_path)
            if img is None:
                return False, "–ù–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Å—ñ—Ä–∏–π –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–Ω—å–æ—ó —è—Å–∫—Ä–∞–≤–æ—Å—Ç—ñ
            mean_brightness = np.mean(gray)
            if mean_brightness < 80:  # –ó–∞–Ω–∞–¥—Ç–æ —Ç–µ–º–Ω–æ
                return False, "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ —Ç–µ–º–Ω–µ"
            if mean_brightness > 240:  # –ó–∞–Ω–∞–¥—Ç–æ —Å–≤—ñ—Ç–ª–æ
                return False, "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ —Å–≤—ñ—Ç–ª–µ"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É
            contrast = np.std(gray)
            if contrast < 30:  # –ù–∏–∑—å–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
                return False, "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–∞—î –Ω–∏–∑—å–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–µ–∫—Å–ø–æ–Ω—É–≤–∞–Ω–Ω—è
            overexposed_pixels = np.sum(gray > 250)
            total_pixels = gray.size
            if overexposed_pixels / total_pixels > 0.1:  # –ë—ñ–ª—å—à–µ 10% –ø–µ—Ä–µ–µ–∫—Å–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –ø—ñ–∫—Å–µ–ª—ñ–≤
                return False, "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–µ–∫—Å–ø–æ–Ω–æ–≤–∞–Ω–µ"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–µ–∫—Å–ø–æ–Ω—É–≤–∞–Ω–Ω—è
            underexposed_pixels = np.sum(gray < 10)
            if underexposed_pixels / total_pixels > 0.1:  # –ë—ñ–ª—å—à–µ 10% –Ω–µ–¥–æ–µ–∫—Å–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –ø—ñ–∫—Å–µ–ª—ñ–≤
                return False, "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ–¥–æ–µ–∫—Å–ø–æ–Ω–æ–≤–∞–Ω–µ"
            
            return True, "–Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å —ñ –∫–æ–Ω—Ç—Ä–∞—Å—Ç –≤ –Ω–æ—Ä–º—ñ"
            
        except Exception as e:
            return False, f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —è—Å–∫—Ä–∞–≤–æ—Å—Ç—ñ: {str(e)}"

    def _check_background_quality(self, image_path: str) -> tuple[bool, str]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ —Ñ–æ–Ω—É"""
        try:
            img = cv2.imread(image_path)
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            # –í–∏—è–≤–ª–µ–Ω–Ω—è –∫—Ä–∞—ó–≤ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —Ñ–æ–Ω—É
            edges = cv2.Canny(gray, 50, 150)
            edge_density = np.sum(edges > 0) / edges.size
            
            if edge_density > 0.15:  # –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –¥–µ—Ç–∞–ª–µ–π —É —Ñ–æ–Ω—ñ
                return False, "–§–æ–Ω –∑–∞–Ω–∞–¥—Ç–æ —Å–∫–ª–∞–¥–Ω–∏–π –∞–±–æ –∑–∞—Ö–∞—Ä–∞—â–µ–Ω–∏–π"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–¥–Ω–æ—Ä—ñ–¥–Ω–æ—Å—Ç—ñ —Ñ–æ–Ω—É
            # –†–æ–∑–¥—ñ–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ –±–ª–æ–∫–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–¥–Ω–æ—Ä—ñ–¥–Ω—ñ—Å—Ç—å
            h, w = gray.shape
            block_size = 50
            uniformity_scores = []
            
            for i in range(0, h - block_size, block_size):
                for j in range(0, w - block_size, block_size):
                    block = gray[i:i+block_size, j:j+block_size]
                    std = np.std(block)
                    uniformity_scores.append(std)
            
            mean_uniformity = np.mean(uniformity_scores)
            if mean_uniformity > 50:  # –§–æ–Ω –Ω–µ –æ–¥–Ω–æ—Ä—ñ–¥–Ω–∏–π
                return False, "–§–æ–Ω –Ω–µ –æ–¥–Ω–æ—Ä—ñ–¥–Ω–∏–π"
            
            return True, "–§–æ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º"
            
        except Exception as e:
            return False, f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–æ–Ω—É: {str(e)}"

    async def _check_with_vision_api(self, content: bytes) -> tuple[bool, str]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ Google Vision API –∑ –∂–æ—Ä—Å—Ç–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
        try:
            image = vision.Image(content=content)
            response = self.client.safe_search_detection(image=image)
            safe = response.safe_search_annotation

            if response.error.message:
                return False, f"–ü–æ–º–∏–ª–∫–∞ API: {response.error.message}"

            print("üîé [Vision] SafeSearch —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
            print(f"    adult: {safe.adult.name}")
            print(f"    racy: {safe.racy.name}")
            print(f"    violence: {safe.violence.name}")
            print(f"    spoof: {safe.spoof.name}")
            print(f"    medical: {safe.medical.name}")

            # –ñ–æ—Ä—Å—Ç–∫—ñ –ø—Ä–∞–≤–∏–ª–∞ - –Ω–∞–≤—ñ—Ç—å "POSSIBLE" –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
            strict_thresholds = ["POSSIBLE", "LIKELY", "VERY_LIKELY"]
            
            if safe.adult.name in strict_thresholds:
                return False, "–í–∏—è–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–æ—Ä–æ—Å–ª–∏—Ö"
            if safe.racy.name in strict_thresholds:
                return False, "–í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–≤–æ–∫–∞—Ç–∏–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"
            if safe.violence.name in strict_thresholds:
                return False, "–í–∏—è–≤–ª–µ–Ω–æ –Ω–∞—Å–∏–ª—å–Ω–∏—Ü—å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"
            if safe.medical.name in ["LIKELY", "VERY_LIKELY"]:
                return False, "–í–∏—è–≤–ª–µ–Ω–æ –º–µ–¥–∏—á–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"
            
            return True, "SafeSearch –ø—Ä–æ–π–¥–µ–Ω–æ"
            
        except Exception as e:
            return False, f"–ü–æ–º–∏–ª–∫–∞ Vision API: {str(e)}"

    async def _check_body_parts(self, content: bytes) -> tuple[bool, str]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ —Ç—ñ–ª–∞ —á–µ—Ä–µ–∑ Face Detection —Ç–∞ Object Detection"""
        try:
            image = vision.Image(content=content)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ–±–ª–∏—á—á—è
            face_response = self.client.face_detection(image=image)
            faces = face_response.face_annotations
            
            if len(faces) > 0:
                return False, "–í–∏—è–≤–ª–µ–Ω–æ –æ–±–ª–∏—á—á—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ–±'—î–∫—Ç–∏ (–≤–∫–ª—é—á–∞—é—á–∏ —á–∞—Å—Ç–∏–Ω–∏ —Ç—ñ–ª–∞)
            object_response = self.client.object_localization(image=image)
            objects = object_response.localized_object_annotations
            
            # –°–ø–∏—Å–æ–∫ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤
            forbidden_objects = [
                "Person", "Human body", "Human face", "Human head", 
                "Human hand", "Human foot", "Human leg", "Human arm",
                "Man", "Woman", "Child", "Baby", "Human eye", "Human hair",
                "Clothing", "Dress", "Shirt", "Pants", "Shoe", "Hat"
            ]
            
            for obj in objects:
                if obj.name in forbidden_objects and obj.score > 0.3:
                    return False, f"–í–∏—è–≤–ª–µ–Ω–æ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π –æ–±'—î–∫—Ç: {obj.name}"
            
            return True, "–ß–∞—Å—Ç–∏–Ω–∏ —Ç—ñ–ª–∞ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ"
            
        except Exception as e:
            return False, f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∞—Å—Ç–∏–Ω —Ç—ñ–ª–∞: {str(e)}"

    def _check_color_distribution(self, image_path: str) -> tuple[bool, str]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∫–æ–ª—å–æ—Ä—ñ–≤"""
        try:
            img = cv2.imread(image_path)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–∞–∂–Ω–æ —Ç–µ–º–Ω—ñ –∫–æ–ª—å–æ—Ä–∏
            hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
            v_channel = hsv[:, :, 2]  # Value channel
            
            # –Ø–∫—â–æ –±—ñ–ª—å—à–µ 60% –ø—ñ–∫—Å–µ–ª—ñ–≤ —Ç–µ–º–Ω—ñ
            dark_pixels = np.sum(v_channel < 60)
            total_pixels = v_channel.size
            
            if dark_pixels / total_pixels > 0.6:
                return False, "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ —Ç–µ–º–Ω–µ (–ø–µ—Ä–µ–≤–∞–∂–∞—é—Ç—å —Ç–µ–º–Ω—ñ –∫–æ–ª—å–æ—Ä–∏)"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ñ—Å—Ç—å
            b, g, r = cv2.split(img)
            
            # –Ø–∫—â–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –º—ñ–∂ –∫–∞–Ω–∞–ª–∞–º–∏ –º–∞–ª–µ, —Ç–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–µ
            channel_std = np.std([np.mean(b), np.mean(g), np.mean(r)])
            if channel_std < 10:
                return False, "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–µ"
            
            return True, "–†–æ–∑–ø–æ–¥—ñ–ª –∫–æ–ª—å–æ—Ä—ñ–≤ –ø—Ä–∏–π–Ω—è—Ç–Ω–∏–π"
            
        except Exception as e:
            return False, f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–ª—å–æ—Ä—ñ–≤: {str(e)}"

    async def is_background_light(self, file_id: str, bot) -> bool:
        """–í–∏–∑–Ω–∞—á–∞—î, —á–∏ —Ñ–æ–Ω –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–≤—ñ—Ç–ª–∏–π (–æ–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)"""
        try:
            file = await bot.get_file(file_id)
            file_path = file.file_path
            photo_url = f"https://api.telegram.org/file/bot{bot.token}/{file_path}"

            async with aiohttp.ClientSession() as session:
                async with session.get(photo_url) as resp:
                    if resp.status != 200:
                        return False
                    content = await resp.read()

            with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as temp_file:
                temp_file.write(content)
                image_path = temp_file.name

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ OpenCV –¥–ª—è –±—ñ–ª—å—à —Ç–æ—á–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏
            img = cv2.imread(image_path)
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            # –ê–Ω–∞–ª—ñ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–∏–Ω–∏ —è–∫ –º–æ–∂–ª–∏–≤–æ–≥–æ —Ñ–æ–Ω—É
            h, w = gray.shape
            center_region = gray[h//4:3*h//4, w//4:3*w//4]
            brightness = np.mean(center_region)

            os.remove(image_path)
            
            return brightness > 140  # –ü—ñ–¥–≤–∏—â–∏–ª–∏ –ø–æ—Ä—ñ–≥ –¥–ª—è –±—ñ–ª—å—à —Å–≤—ñ—Ç–ª–æ–≥–æ —Ñ–æ–Ω—É
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–æ–Ω—É: {e}")
            return False

    # –†–µ—à—Ç–∞ –º–µ—Ç–æ–¥—ñ–≤ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
    def add_watermark(self, image_path: str, output_path: str, config) -> None:
        """–î–æ–¥–∞—î –≤–∞—Ç–µ—Ä–º–∞—Ä–∫—É –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        base = Image.open(image_path).convert("RGBA")
        watermark = Image.open(config.WATERMARK_PATH).convert("RGBA")

        scale_ratio = min(base.size[0] / (4 * watermark.size[0]), 1.0)
        new_size = (int(watermark.size[0] * scale_ratio), int(watermark.size[1] * scale_ratio))
        watermark = watermark.resize(new_size, Image.LANCZOS)

        alpha = watermark.split()[3]
        alpha = ImageEnhance.Brightness(alpha).enhance(config.WATERMARK_OPACITY)
        watermark.putalpha(alpha)

        margin = 10
        if config.WATERMARK_POSITION == "bottom_right":
            position = (base.size[0] - watermark.size[0] - margin, base.size[1] - watermark.size[1] - margin)
        elif config.WATERMARK_POSITION == "bottom_left":
            position = (margin, base.size[1] - watermark.size[1] - margin)
        elif config.WATERMARK_POSITION == "top_right":
            position = (base.size[0] - watermark.size[0] - margin, margin)
        else:
            position = (margin, margin)

        base.paste(watermark, position, watermark)
        base.convert("RGB").save(output_path, "JPEG")

    async def add_watermark_from_file_id(self, file_id: str, bot) -> str:
        """–°–∫–∞—á—É—î —Ñ–æ—Ç–æ –ø–æ file_id, –¥–æ–¥–∞—î –≤–∞—Ç–µ—Ä–º–∞—Ä–∫, –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π file_id"""
        try:
            config = bot.config
            file = await bot.get_file(file_id)
            photo_url = f"https://api.telegram.org/file/bot{bot.token}/{file.file_path}"

            async with aiohttp.ClientSession() as session:
                async with session.get(photo_url) as resp:
                    if resp.status != 200:
                        return file_id
                    content = await resp.read()

            with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as temp_input:
                temp_input.write(content)
                temp_input_path = temp_input.name

            temp_output_path = temp_input_path.replace(".jpg", "_wm.jpg")

            self.add_watermark(temp_input_path, temp_output_path, config)

            sent = await bot.send_photo(
                chat_id=bot.config.WATERMARK_TEMP_CHAT_ID or bot.config.CHANNEL_ID,
                photo=FSInputFile(temp_output_path),
                disable_notification=True
            )
            new_file_id = sent.photo[-1].file_id

            os.remove(temp_input_path)
            os.remove(temp_output_path)

            return new_file_id

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤–∞—Ç–µ—Ä–º–∞—Ä–∫–∏: {e}")
            return file_id