import openai
import random
from google.cloud import vision
import aiohttp
import tempfile
import os
from PIL import Image, ImageStat, ImageDraw, ImageFont, ImageEnhance
from aiogram.types import FSInputFile
import re
import asyncio
from aiogram import Bot




import openai
import re
import random

class OpenAIService:
    def __init__(self, api_key):
        self.client = openai.AsyncOpenAI(api_key=api_key)

    def _get_category_emoji(self, category: str) -> str:
        mapping = {
            "–¥–æ–≥–ª—è–¥ –∑–∞ –æ–±–ª–∏—á—á—è–º": "üß¥",
            "–¥–æ–≥–ª—è–¥ –∑–∞ —Ç—ñ–ª–æ–º": "üßº",
            "–¥–æ–≥–ª—è–¥ –∑–∞ –≤–æ–ª–æ—Å—Å—è–º": "üßñ‚Äç‚ôÄÔ∏è",
            "–≥–∞–¥–∂–µ—Ç–∏": "‚öôÔ∏è"
        }
        return mapping.get(category.strip().lower(), "‚ú®")

    def _clean_telegram_text(self, text: str) -> str:
        # –í–∏–¥–∞–ª—è—î–º–æ markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        cleaned = re.sub(r'[*_`]', '', text)
        cleaned = re.sub(r'\[.+?\]\(.+?\)', '', cleaned)
        return cleaned.strip()

    def _select_hashtags(self, data: dict) -> str:
        """–í–∏–±–∏—Ä–∞—î 3 –Ω–∞–π–∫—Ä–∞—â—ñ —Ö–µ—à—Ç–µ–≥–∏ –∑ –Ω–∞—è–≤–Ω–∏—Ö"""
        all_tags = [
            "#–∑_–ª—é–±–æ–≤ º—é_–≤—ñ–¥–ø—É—Å–∫–∞—é",
            "#–π–æ–π_–Ω–µ_–º–æ—î", 
            "#–Ω—é—Ö–æ–≤—ñ_—Ç—Ä–∞–≤–º–∏",
            "#–≤—ñ–¥–∫—Ä–∏—Ç–∏–π_–∞–ª–µ_–∂–∏–≤–∏–π",
            "#–æ–±–µ—Ä–µ–∂–Ω–æ_—Ç–µ–∫—Å—Ç—É—Ä–∞",
            "#—à–æ—Å—å_–Ω–µ–ø–æ–Ω—è—Ç–Ω–µ_–Ω–∞_–¥–æ—Ç–∏–∫"
        ]
        
        # –í–∏–±–∏—Ä–∞—î–º–æ 3 –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –≤–∞—Ä—ñ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        selected = random.sample(all_tags, min(3, len(all_tags)))
        return ' '.join(selected)

    def _format_dates_creatively(self, opened_at: str, expire_at: str) -> str:
        """–°—Ç–≤–æ—Ä—é—î –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π –æ–ø–∏—Å –¥–∞—Ç –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è"""
        try:
            # –í–∏—Ç—è–≥—É—î–º–æ —Ä–æ–∫–∏ –∑ –¥–∞—Ç
            opened_year = None
            expire_year = None
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä—ñ–∫ —É opened_at
            import re
            opened_match = re.search(r'20\d{2}', opened_at)
            if opened_match:
                opened_year = opened_match.group()
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä—ñ–∫ —É expire_at
            expire_match = re.search(r'20\d{2}', expire_at)
            if expire_match:
                expire_year = expire_match.group()
            
            if opened_year and expire_year:
                years_left = int(expire_year) - 2025  # –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫
                if years_left > 0:
                    return f"–≤—ñ–¥–∫—Ä–∏—Ç–∏–π {opened_year}, –∞–ª–µ —â–µ —Ç—Ä–∏–º–∞—î—Ç—å—Å—è –¥–æ {expire_year} (–∂–∏–≤–µ {years_left} {'—Ä—ñ–∫' if years_left == 1 else '—Ä–æ–∫–∏'})"
                elif years_left == 0:
                    return f"–≤—ñ–¥–∫—Ä–∏—Ç–∏–π {opened_year}, —Ç–µ—Ä–º—ñ–Ω –¥–æ {expire_year} (–æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—ñ–∫)"
                else:
                    return f"–≤—ñ–¥–∫—Ä–∏—Ç–∏–π {opened_year}, —Ç–µ—Ä–º—ñ–Ω –º–∏–Ω—É–≤ —É {expire_year} (–∞–ª–µ —â–µ –∂–∏–≤–∏–π)"
            elif opened_year:
                return f"–≤—ñ–¥–∫—Ä–∏—Ç–∏–π {opened_year}, —Ç–µ—Ä–º—ñ–Ω –Ω–µ –¥–∏—Ö–∞—î –Ω–∞ —Å–ø–∏–Ω—É"
            else:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ä–æ–∫—ñ–≤, —Ä–æ–±–∏–º–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π –æ–ø–∏—Å
                if "–∑–∞–∫—Ä–∏—Ç–æ" in opened_at.lower():
                    return f"–∑–∞–∫—Ä–∏—Ç–∏–π, –¥–æ {expire_at} (—Å–ø–∏—Ç—å —è–∫ –∫—Ä–∞—Å—É–Ω—è)"
                else:
                    return f"{opened_at}, –¥–æ {expire_at} (–≤ —Ç–∞–∫–æ–º—É —Å—Ç–∏–ª—ñ)"
        except:
            return f"{opened_at}, –¥–æ {expire_at}"

    async def generate_post_text(self, data: dict) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –≤–µ—Å—å –ø–æ—Å—Ç —á–µ—Ä–µ–∑ GPT –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏"""
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
        emoji = self._get_category_emoji(data['category'])
        formatted_dates = self._format_dates_creatively(
            data.get('opened_at', ''), 
            data.get('expire_at', '')
        )
        hashtags = self._select_hashtags(data)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ü—ñ–Ω–∞ –∞–±–æ –æ–±–º—ñ–Ω
        is_sale = bool(data.get('price_buy')) and bool(data.get('price_sell'))
        exchange_option = data.get('exchange_option', '').strip()
        is_exchange = bool(exchange_option and exchange_option.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏')

        system_prompt = """–¢–∏ –∞–¥–∞–ø—Ç—É—î—à –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Å–º–µ—Ç–∏—á–Ω–∏–π –∑–∞—Å—ñ–± —É —ñ—Ä–æ–Ω—ñ—á–Ω–æ-—Ä–æ–∑—á–∞—Ä–æ–≤–∞–Ω–∏–π —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ–¥–∞–∂—É –±/—É –∫–æ—Å–º–µ—Ç–∏–∫–∏.

–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û - –°–¢–†–£–ö–¢–£–†–ê –í–ò–í–û–î–£:
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –û–ë–û–í'–Ø–ó–ö–û–í–ê (–∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ –∑ "‚Ä¢ "):
{emoji} {–Ω–∞–∑–≤–∞}
‚Ä¢ –ó–∞–ª–∏—à–æ–∫: {–≤—ñ–¥—Å–æ—Ç–æ–∫}% ({–º–µ—Ç–∞—Ñ–æ—Ä–∞})
‚Ä¢ –í—ñ–¥–∫—Ä–∏—Ç–æ: {–∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π –æ–ø–∏—Å –¥–∞—Ç}
‚Ä¢ –ß–æ–º—É –ø—Ä–æ–¥–∞—é: {—ñ—Ä–æ–Ω—ñ—á–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞}
‚Ä¢ –ü—Ä–æ –∑–∞—Å—ñ–±: {—Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–∏–π –æ–ø–∏—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞}
‚Ä¢ –®–∫—ñ—Ä–∞: {—Å—Ç–∏–ª—å —Ç–∏–ø—É —à–∫—ñ—Ä–∏}
‚Ä¢ –¶—ñ–Ω–∞: {—Ä–µ–∞–ª—å–Ω—ñ —Ü–∏—Ñ—Ä–∏ + –∂–∞—Ä—Ç} –ê–ë–û ‚Ä¢ –û–±–º—ñ–Ω: {—Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –æ–±–º—ñ–Ω—É + –∂–∞—Ä—Ç}
‚Ä¢ –õ–æ–∫–∞—Ü—ñ—è: {–º—ñ—Å—Ç–æ}, –¥–æ—Å—Ç–∞–≤–∫–∞: {–¥–æ—Å—Ç–∞–≤–∫–∞ –∑ –≥—É–º–æ—Ä–æ–º}
{3 —Ö–µ—à—Ç–µ–≥–∏ –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª–∏}

–°–¢–ò–õ–¨:
- –Ü—Ä–æ–Ω—ñ—è —Ç–∞ –ª–µ–≥–∫–µ —Ä–æ–∑—á–∞—Ä—É–≤–∞–Ω–Ω—è
- –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è ("–º–æ—è —à–∫—ñ—Ä–∞", "–æ—Å–æ–±–∏—Å—Ç–æ –º–µ–Ω–µ")
- –ú–µ—Ç–∞—Ñ–æ—Ä–∏ –∑ –∂–∏—Ç—Ç—è
- –ì—É–º–æ—Ä –±–µ–∑ —Å–ø–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–∫—Ç—ñ–≤
- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—Å—ñ—î—ó —Ñ–∞–∫—Ç–∏—á–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó

–ú–ï–¢–ê–§–û–†–ò –î–õ–Ø –ó–ê–õ–ò–®–ö–£:
95-100%: "—Å—Ç–æ—è–ª–∞ —è–∫ –∑–∞–ø–∞—Å–∫–∞", "–Ω–æ–≤–∞, –∞–ª–µ –Ω–µ –∑—ñ–π—à–ª–∏—Å—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞–º–∏"
90-95%: "–≤—Å–µ —â–µ –±–æ–π–æ–≤–∞", "–º–∞–π–∂–µ –Ω–µ–¥–æ—Ç–æ—Ä–∫–∞–Ω–∞"
80-90%: "–≤—ñ–¥–∫—Ä–∏–≤–∞–ª–∞ –æ–±–µ—Ä–µ–∂–Ω–æ", "–ø–∞—Ä—É —Ä–∞–∑—ñ–≤ —Å–ø—Ä–æ–±—É–≤–∞–ª–∞"
70-80%: "–º–∞–∑–∞–ª–∞—Å—å –¥–µ–∫—ñ–ª—å–∫–∞ —Ä–∞–∑", "—â–µ –ø–∞—Ö–Ω–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é"
60-70%: "—Ç—Ä—ñ—à–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–ª–∞—Å—å", "—â–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
40-60%: "–¥–µ—Å—å –ø—ñ–¥ –ø–æ–ª–æ–≤–∏–Ω—É", "—î —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏"
20-40%: "—â–µ —î –∂–∏—Ç—Ç—è", "–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ"
10-20%: "–Ω–µ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ, –∞–ª–µ –π –Ω–µ –≤ –∞—Ä—Ö—ñ–≤—ñ"
5-10%: "–±–∞–Ω–∫–∞ –Ω–µ –ø–æ—Ä–æ–∂–Ω—è", "–∑–∞–ª–∏—à–∏–ª–æ—Å—å –Ω–∞ —Å–ø–æ–º–∏–Ω"
<5%: "–º—ñ–Ω—ñ–º–∞–ª–æ—á–∫–∞", "—Å–∏–º–≤–æ–ª—ñ—á–Ω–æ"

–¢–ò–ü–ò –®–ö–Ü–†–ò (–¥–ª—è –ø–æ–ª—è "‚Ä¢ –®–∫—ñ—Ä–∞:"):
- —Å—É—Ö–∞: "—Å—É—Ö–∞, —è–∫ —á–∞—Ç —É —Ä–æ–±–æ—á—É —Å—É–±–æ—Ç—É"
- –∂–∏—Ä–Ω–∞: "–∂–∏—Ä–Ω–∞, –∞–ª–µ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è —Ç—Ä–∏–º–∞—Ç–∏—Å—å"
- –∑–º—ñ—à–∞–Ω–∞: "–∑–º—ñ—à–∞–Ω–∞, —è–∫ –Ω–∞—Å—Ç—Ä—ñ–π —É –ø–æ–Ω–µ–¥—ñ–ª–æ–∫"  
- —á—É—Ç–ª–∏–≤–∞: "—á—É—Ç–ª–∏–≤–∞, –∞–ª–µ –±–µ–∑ –¥—Ä–∞–º–∏"
- –Ω–æ—Ä–º–∞–ª—å–Ω–∞: "–Ω–æ—Ä–º–∞–ª—å–Ω–∞ (—Ä—ñ–¥–∫—ñ—Å—Ç—å —É –Ω–∞—à —á–∞—Å)"

–î–ê–¢–ò: –û–±–æ–≤'—è–∑–∫–æ–≤–æ –∞–¥–∞–ø—Ç—É–π –¥–∞—Ç–∏ –∑ –≥—É–º–æ—Ä–æ–º:
- "–≤—ñ–¥–∫—Ä–∏—Ç–∏–π 2023, –∞–ª–µ —â–µ —Ç—Ä–∏–º–∞—î—Ç—å—Å—è –¥–æ 2026" (–∑–º—ñ–Ω–∏ —Ä–æ–∫–∏ –Ω–∞ —Ç—ñ —â–æ –Ω–∞–¥–∞–Ω—ñ)
- "–∂–∏–≤–µ —â–µ 3 —Ä–æ–∫–∏" (—Ä–∞—Ö—É–π —Ä—ñ–∑–Ω–∏—Ü—é)
- "–≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ä—ñ–∫ —Ç–æ–º—É, —Ç–µ—Ä–º—ñ–Ω —â–µ –Ω–µ –¥–∏—Ö–∞—î –Ω–∞ —Å–ø–∏–Ω—É"

–õ–û–ö–ê–¶–Ü–Ø: –û–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–æ–¥–∞–π –≥—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä:
- "–û–¥–µ—Å–∞, –¥–æ—Å—Ç–∞–≤–∫–∞: üì¶ –ù–æ–≤–∞ –ü–æ—à—Ç–∞ (—è–∫ –∑–∞–≤–∂–¥–∏)"
- "–ö–∏—ó–≤, –¥–æ—Å—Ç–∞–≤–∫–∞: üìÆ –£–∫—Ä–ø–æ—à—Ç–∞ (–∫–æ–ª–∏ –¥–æ—á–µ–∫–∞—î–º–æ—Å—å)"
- "–õ—å–≤—ñ–≤, –¥–æ—Å—Ç–∞–≤–∫–∞: üöö –±—É–¥—å-—è–∫–∞ (–∞–±–∏ –¥—ñ–π—à–ª–∞)"

–ß–û–ú–£ –ü–†–û–î–ê–Æ: –û–±–æ–≤'—è–∑–∫–æ–≤–æ –∞–¥–∞–ø—Ç—É–π –ø—Ä–∏—á–∏–Ω—É –∑ —ñ—Ä–æ–Ω—ñ—î—é:
- "–ù–µ –∫–æ—Ä–∏—Å—Ç—É—é—Å—å" ‚Üí "—Å—Ç–æ—ó—Ç—å —ñ –¥–∏–≤–∏—Ç—å—Å—è –Ω–∞ –º–µ–Ω–µ –∑ –¥–æ–∫–æ—Ä–æ–º"
- "–ù–∞–±—Ä–∏–¥" ‚Üí "–Ω–∞—à—ñ —Å—Ç–æ—Å—É–Ω–∫–∏ –∑–∞–π—à–ª–∏ –≤ –≥–ª—É—Ö–∏–π –∫—É—Ç"
- "–ù–µ –º–æ—î" ‚Üí "–Ω–µ –∑—ñ–π—à–ª–∏—Å—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞–º–∏ –∑ –ø–µ—Ä—à–æ–≥–æ –¥–æ—Ç–∏–∫—É"

–ü–†–û –ó–ê–°–Ü–ë: –ù–ï –≤–∏–≥–∞–¥—É–π —Ä–µ–∫–ª–∞–º–Ω–∏–π —Ç–µ–∫—Å—Ç! –°—Ç–∏–ª—ñ–∑—É–π –¢–ï, –©–û –ù–ê–ü–ò–°–ê–í –ö–û–†–ò–°–¢–£–í–ê–ß:
- –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤ "–î–æ–±—Ä–∏–π –∫—Ä–µ–º –¥–ª—è —Å—É—Ö–æ—ó —à–∫—ñ—Ä–∏" ‚Üí "–∫—Ä–µ–º –∑ –∞–º–±—ñ—Ü—ñ—è–º–∏ –¥–ª—è —Å—É—Ö–æ—ó —à–∫—ñ—Ä–∏ (–Ω–µ –¥–ª—è –º–æ—î—ó)"
- –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤ "–°–∏—Ä–æ–≤–∞—Ç–∫–∞ –∑ –≤—ñ—Ç–∞–º—ñ–Ω–æ–º –°" ‚Üí "—Å–∏—Ä–æ–≤–∞—Ç–∫–∞ –∑ –≤—ñ—Ç–∞–º—ñ–Ω–æ–º –° —ñ –≤–µ–ª–∏–∫–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏"
- –ó–ê–í–ñ–î–ò –∑–±–µ—Ä—ñ–≥–∞–π —Ñ–∞–∫—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Ç—ñ–ª—å–∫–∏ –¥–æ–¥–∞–≤–∞–π –≥—É–º–æ—Ä

–¶–Ü–ù–ê/–û–ë–ú–Ü–ù - –í–ê–ñ–õ–ò–í–û:
- –Ø–∫—â–æ –ü–†–û–î–ê–ñ: "‚Ä¢ –¶—ñ–Ω–∞: –ö—É–ø—É–≤–∞–ª–∞ –∑–∞ X –≥—Ä–Ω, –≤—ñ–¥–¥–∞—é –∑–∞ Y –≥—Ä–Ω (–≤—ñ–¥–ø—É—â—É –≤ –ª—é–¥–∏ –∑–∞ —Å–∏–º–≤–æ–ª—ñ—á–Ω—É –ø–ª–∞—Ç—É)"
- –Ø–∫—â–æ –û–ë–ú–Ü–ù: "‚Ä¢ –û–±–º—ñ–Ω: [—Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –æ–±–º—ñ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∂–∞—Ä—Ç–æ–º]"
- –ù–ï –ø–∏—à–∏ "—Ü—ñ–Ω–∞ –∑ –∂–∞—Ä—Ç–æ–º" - –ø–∏—à–∏ –†–ï–ê–õ–¨–ù–Ü –¶–ò–§–†–ò!

–û–ë–ú–ï–ñ–ï–ù–ù–Ø: –í–µ—Å—å —Ç–µ–∫—Å—Ç —Ä–∞–∑–æ–º –∑ —Ö–µ—à—Ç–µ–≥–∞–º–∏ ‚â§950 —Å–∏–º–≤–æ–ª—ñ–≤!

–•–ï–®–¢–ï–ì–ò: –û–±–µ—Ä–∏ 3 –∑ —Ü–∏—Ö —Ö–µ—à—Ç–µ–≥—ñ–≤ —ñ –ø–æ–º—ñ—Å—Ç–∏ –≤ –û–î–ù–û–ú–£ —Ä—è–¥–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª–∏:
#–∑_–ª—é–±–æ–≤ º—é_–≤—ñ–¥–ø—É—Å–∫–∞—é #–π–æ–π_–Ω–µ_–º–æ—î #–Ω—é—Ö–æ–≤—ñ_—Ç—Ä–∞–≤–º–∏ #–≤—ñ–¥–∫—Ä–∏—Ç–∏–π_–∞–ª–µ_–∂–∏–≤–∏–π #–æ–±–µ—Ä–µ–∂–Ω–æ_—Ç–µ–∫—Å—Ç—É—Ä–∞ #—à–æ—Å—å_–Ω–µ–ø–æ–Ω—è—Ç–Ω–µ_–Ω–∞_–¥–æ—Ç–∏–∫"""

        user_prompt = f"""–ê–¥–∞–ø—Ç—É–π —Ü—ñ –¥–∞–Ω—ñ –ø—ñ–¥ –Ω–∞—à —Å—Ç–∏–ª—å:

–î–ê–ù–Ü:
–ù–∞–∑–≤–∞: {data['title']}
–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {data['category']}
–ó–∞–ª–∏—à–æ–∫: {data.get('left_percent', 0)}%
–î–∞—Ç–∏: {formatted_dates}
–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {data.get('reason', '')}
–û–ø–∏—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {data.get('user_description', '')}
–¢–∏–ø —à–∫—ñ—Ä–∏: {data.get('skin_type', '')}
–ú—ñ—Å—Ç–æ: {data.get('city', '')}
–î–æ—Å—Ç–∞–≤–∫–∞: {data.get('delivery', '')}
{"–¶—ñ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: " + str(data.get('price_buy', '')) + " –≥—Ä–Ω, –ø—Ä–æ–¥–∞–∂—É: " + str(data.get('price_sell', '')) + " –≥—Ä–Ω" if is_sale else ""}
{"–û–±–º—ñ–Ω –Ω–∞: " + exchange_option if is_exchange else ""}

–ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç —É –≤–∫–∞–∑–∞–Ω—ñ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ, –ë–ï–ó –ø–æ—è—Å–Ω–µ–Ω—å."""

        try:
            response = await self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=800,
                temperature=0.7  # –ë–∞–ª–∞–Ω—Å –º—ñ–∂ —Ç–≤–æ—Ä—á—ñ—Å—Ç—é —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—é
            )
            
            result = response.choices[0].message.content.strip()
            result = self._clean_telegram_text(result)
            
            # –î–æ–¥–∞—î–º–æ –µ–º–æ–¥–∂—ñ –¥–æ –Ω–∞–∑–≤–∏, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
            if not result.startswith(emoji):
                lines = result.split('\n')
                if lines[0] and not any(e in lines[0] for e in ['üß¥', 'üßº', 'üßñ‚Äç‚ôÄÔ∏è', '‚öôÔ∏è', '‚ú®']):
                    lines[0] = f"{emoji} {lines[0]}"
                    result = '\n'.join(lines)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Ç–∞ —Å–∫–æ—Ä–æ—á—É—î–º–æ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if len(result) > 950:
                lines = result.split('\n')
                # –°–∫–æ—Ä–æ—á—É—î–º–æ –æ–ø–∏—Å –∑–∞—Å–æ–±—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                for i, line in enumerate(lines):
                    if line.startswith('‚Ä¢ –ü—Ä–æ –∑–∞—Å—ñ–±:') and len(result) > 950:
                        # –°–∫–æ—Ä–æ—á—É—î–º–æ –æ–ø–∏—Å
                        desc_part = line.split(':', 1)[1].strip()
                        if len(desc_part) > 50:
                            desc_part = desc_part[:47] + '...'
                            lines[i] = f"‚Ä¢ –ü—Ä–æ –∑–∞—Å—ñ–±: {desc_part}"
                            result = '\n'.join(lines)
                            break
                
                # –Ø–∫—â–æ –≤—Å–µ —â–µ –¥–æ–≤–≥–∏–π, –æ–±—Ä—ñ–∑–∞—î–º–æ –≤ –∫—ñ–Ω—Ü—ñ
                if len(result) > 950:
                    result = result[:947] + '...'
            
            return result
            
        except Exception as e:
            print(f"‚ùå Error generating post: {e}")
            return self._generate_fallback_post(data)

    def _generate_fallback_post(self, data: dict) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ—Å—Ç–∞"""
        emoji = self._get_category_emoji(data['category'])
        formatted_dates = self._format_dates_creatively(
            data.get('opened_at', ''), 
            data.get('expire_at', '')
        )
        
        # –ë–∞–∑–æ–≤–∞ –º–µ—Ç–∞—Ñ–æ—Ä–∞ –¥–ª—è –∑–∞–ª–∏—à–∫—É
        percent = int(data.get('left_percent', 0))
        if percent >= 95:
            condition = "—Å—Ç–æ—è–ª–∞ —è–∫ –∑–∞–ø–∞—Å–∫–∞, –∞–ª–µ –Ω–µ –∑—ñ–π—à–ª–∏—Å—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞–º–∏"
        elif percent >= 80:
            condition = "–≤—ñ–¥–∫—Ä–∏–≤–∞–ª–∞ –æ–±–µ—Ä–µ–∂–Ω–æ"
        elif percent >= 50:
            condition = "–¥–µ—Å—å –ø—ñ–¥ –ø–æ–ª–æ–≤–∏–Ω—É"
        elif percent >= 20:
            condition = "—â–µ —î –∂–∏—Ç—Ç—è"
        else:
            condition = "–∑–∞–ª–∏—à–∏–ª–æ—Å—å –Ω–∞ —Å–ø–æ–º–∏–Ω"
        
        is_sale = bool(data.get('price_buy')) and bool(data.get('price_sell'))
        exchange_option = data.get('exchange_option', '').strip()
        is_exchange = bool(exchange_option and exchange_option.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏')
        
        lines = [
            f"{emoji} {data['title']}",
            f"‚Ä¢ –ó–∞–ª–∏—à–æ–∫: {percent}% ({condition})",
            f"‚Ä¢ –í—ñ–¥–∫—Ä–∏—Ç–æ: {formatted_dates}",
            f"‚Ä¢ –ß–æ–º—É –ø—Ä–æ–¥–∞—é: {data.get('reason', '–Ω–µ –º–æ—î')}",
            f"‚Ä¢ –ü—Ä–æ –∑–∞—Å—ñ–±: {data.get('user_description', '–∑–∞—Å—ñ–± –∑ –∞–º–±—ñ—Ü—ñ—è–º–∏')}",
            f"‚Ä¢ –®–∫—ñ—Ä–∞: {data.get('skin_type', '—Ä—ñ–∑–Ω–∞')}"
        ]
        
        if is_sale:
            lines.append(f"‚Ä¢ –¶—ñ–Ω–∞: {data['price_buy']} ‚Üí {data['price_sell']} –≥—Ä–Ω")
        elif is_exchange:
            lines.append(f"‚Ä¢ –û–±–º—ñ–Ω: {exchange_option}")
        
        lines.append(f"‚Ä¢ –õ–æ–∫–∞—Ü—ñ—è: {data.get('city', '')}, –¥–æ—Å—Ç–∞–≤–∫–∞: {data.get('delivery', '')}")
        lines.append(self._select_hashtags(data))
        
        result = '\n'.join(lines)
        return result[:950] if len(result) > 950 else result






    



class GoogleVisionService:
    def __init__(self, service_account_path: str):
        self.client = vision.ImageAnnotatorClient.from_service_account_file(service_account_path)

    async def validate_photo(self, file_id: str, bot) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ —á—É—Ç–ª–∏–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ Google Vision API"""
        print("üîç [Vision] –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ñ–æ—Ç–æ...")

        try:
            file = await bot.get_file(file_id)
            file_path = file.file_path
            photo_url = f"https://api.telegram.org/file/bot{bot.token}/{file_path}"

            print(f"üì• [Vision] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –∑: {photo_url}")
            async with aiohttp.ClientSession() as session:
                async with session.get(photo_url) as resp:
                    if resp.status != 200:
                        print(f"‚ùå [Vision] –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ. –°—Ç–∞—Ç—É—Å: {resp.status}")
                        return False
                    content = await resp.read()

            with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as temp_file:
                temp_file.write(content)
                image_path = temp_file.name

            with open(image_path, "rb") as image_file:
                content = image_file.read()

            image = vision.Image(content=content)
            response = self.client.safe_search_detection(image=image)
            safe = response.safe_search_annotation

            os.remove(image_path)

            if response.error.message:
                print(f"‚ùå [Vision] –ü–æ–º–∏–ª–∫–∞ API: {response.error.message}")
                return False

            print("üîé [Vision] SafeSearch —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
            print(f"    adult: {safe.adult.name}")
            print(f"    racy: {safe.racy.name}")
            print(f"    violence: {safe.violence.name}")
            print(f"    spoof: {safe.spoof.name}")
            print(f"    medical: {safe.medical.name}")

            thresholds = ["LIKELY", "VERY_LIKELY"]
            is_inappropriate = (
                safe.adult.name in thresholds or
                safe.violence.name in thresholds or
                safe.racy.name in thresholds
            )

            if is_inappropriate:
                print("‚õîÔ∏è [Vision] –§–æ—Ç–æ –≤–≤–∞–∂–∞—î—Ç—å—Å—è –Ω–µ–ø—Ä–∏–π–Ω—è—Ç–Ω–∏–º —á–µ—Ä–µ–∑ SafeSearch.")
                return False

            print("‚úÖ [Vision] –§–æ—Ç–æ –ø—Ä–æ–π—à–ª–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")
            return True

        except Exception as e:
            print(f"‚ùå [Vision] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ: {e}")
            return False


    async def is_background_light(self, file_id: str, bot) -> bool:
        """–í–∏–∑–Ω–∞—á–∞—î, —á–∏ —Ñ–æ–Ω –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–≤—ñ—Ç–ª–∏–π"""
        file = await bot.get_file(file_id)
        file_path = file.file_path
        photo_url = f"https://api.telegram.org/file/bot{bot.token}/{file_path}"

        async with aiohttp.ClientSession() as session:
            async with session.get(photo_url) as resp:
                if resp.status != 200:
                    return False
                content = await resp.read()

        with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as temp_file:
            temp_file.write(content)
            image_path = temp_file.name

        image = Image.open(image_path).convert("L")
        stat = ImageStat.Stat(image)
        brightness = stat.mean[0]

        os.remove(image_path)

        return brightness > 130

    def add_watermark(self, image_path: str, output_path: str, config) -> None:
        """–î–æ–¥–∞—î –≤–∞—Ç–µ—Ä–º–∞—Ä–∫—É –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        base = Image.open(image_path).convert("RGBA")
        watermark = Image.open(config.WATERMARK_PATH).convert("RGBA")

        scale_ratio = min(base.size[0] / (4 * watermark.size[0]), 1.0)
        new_size = (int(watermark.size[0] * scale_ratio), int(watermark.size[1] * scale_ratio))
        watermark = watermark.resize(new_size, Image.LANCZOS)

        alpha = watermark.split()[3]
        alpha = ImageEnhance.Brightness(alpha).enhance(config.WATERMARK_OPACITY)
        watermark.putalpha(alpha)

        margin = 10
        if config.WATERMARK_POSITION == "bottom_right":
            position = (base.size[0] - watermark.size[0] - margin, base.size[1] - watermark.size[1] - margin)
        elif config.WATERMARK_POSITION == "bottom_left":
            position = (margin, base.size[1] - watermark.size[1] - margin)
        elif config.WATERMARK_POSITION == "top_right":
            position = (base.size[0] - watermark.size[0] - margin, margin)
        else:
            position = (margin, margin)

        base.paste(watermark, position, watermark)
        base.convert("RGB").save(output_path, "JPEG")

    async def add_watermark_from_file_id(self, file_id: str, bot) -> str:
        """–°–∫–∞—á—É—î —Ñ–æ—Ç–æ –ø–æ file_id, –¥–æ–¥–∞—î –≤–∞—Ç–µ—Ä–º–∞—Ä–∫, –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π file_id"""
        try:
            config = bot.config
            file = await bot.get_file(file_id)
            photo_url = f"https://api.telegram.org/file/bot{bot.token}/{file.file_path}"

            async with aiohttp.ClientSession() as session:
                async with session.get(photo_url) as resp:
                    if resp.status != 200:
                        return file_id
                    content = await resp.read()

            with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as temp_input:
                temp_input.write(content)
                temp_input_path = temp_input.name

            temp_output_path = temp_input_path.replace(".jpg", "_wm.jpg")

            self.add_watermark(temp_input_path, temp_output_path, config)

            sent = await bot.send_photo(
                chat_id=bot.config.WATERMARK_TEMP_CHAT_ID or bot.config.CHANNEL_ID,
                photo=FSInputFile(temp_output_path),  # ‚úÖ –ø–µ—Ä–µ–¥–∞—î–º–æ —à–ª—è—Ö, –Ω–µ –æ–± º—î–∫—Ç
                disable_notification=True
            )
            new_file_id = sent.photo[-1].file_id

            os.remove(temp_input_path)
            os.remove(temp_output_path)

            return new_file_id

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤–∞—Ç–µ—Ä–º–∞—Ä–∫–∏: {e}")
            return file_id
