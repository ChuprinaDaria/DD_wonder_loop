import asyncio
import logging
import os
from dotenv import load_dotenv

# ‚¨Ö –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env
load_dotenv()

# –Ü–º–ø–æ—Ä—Ç–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ENV
from config import Config
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from handlers import router
from database import DatabaseManager
from utils.ai_services import OpenAIService, GoogleVisionService
from utils.admin_utils import admin_router, AdminUtils
from utils.TrustedUserUpdater import TrustedUserUpdater
from utils.inline_router import inline_router

# ‚¨Ö –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        print("[DEBUG] BOT_TOKEN from ENV:", os.getenv("BOT_TOKEN"))

        # ‚¨Ö –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        config = Config()

        # ‚¨Ö –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(token=config.BOT_TOKEN)
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)

        # ‚¨Ö –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏
        db_manager = DatabaseManager(config.DATABASE_URL)
        await db_manager.init_db()

        # ‚¨Ö –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è AI-—Å–µ—Ä–≤—ñ—Å—ñ–≤
        openai_service = OpenAIService(config.OPENAI_API_KEY)
        vision_service = GoogleVisionService(config.GOOGLE_VISION_KEY)

        # ‚¨Ö –ü–µ—Ä–µ–¥–∞—á–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≤ –æ–± º—î–∫—Ç –±–æ—Ç–∞
        bot.db = db_manager
        bot.openai = openai_service
        bot.vision = vision_service
        bot.config = config
        bot.admin_utils = AdminUtils(bot)

        # ‚¨Ö TrustedUserUpdater (–≤–∏–∫–ª–∏–∫–∞—î–º–æ —Ä–∞–∑ –Ω–∞ 2 –≥–æ–¥–∏–Ω–∏)
        async def run_trusted_updater():
            updater = TrustedUserUpdater(
                db_pool=db_manager.pool,
                api_url=config.API_BASE_URL,
                bot=bot
            )
            while True:
                logger.info("‚è≥ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
                await updater.update_trusted()
                logger.info("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                await asyncio.sleep(60 * 60 * 2)



        asyncio.create_task(run_trusted_updater())

        # ‚¨Ö –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ—É—Ç–µ—Ä—ñ–≤
        dp.include_router(admin_router)
        dp.include_router(inline_router)
        dp.include_router(router)

        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
        await dp.start_polling(bot, skip_updates=True)

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")

    finally:
        if 'db_manager' in locals():
            await db_manager.close()

        print(f"[DEBUG] –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ callback-—Ö–µ–Ω–¥–ª–µ—Ä–∏: {dp.callback_query.outer_middleware}")


if __name__ == "__main__":
    asyncio.run(main())
