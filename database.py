import asyncio
import asyncpg
import pandas as pd
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any
import logging

logger = logging.getLogger(__name__)

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    print("‚úÖ database.py LOADED")

    def __init__(self, database_url: str):
        self.database_url = database_url
        self.pool = None
    
    async def init_db(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å"""
        self.pool = await asyncpg.create_pool(self.database_url)
        await self.create_tables()
    
    async def close(self):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î"""
        if self.pool:
            await self.pool.close()

    async def clear_pending_lots(self) -> int:
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –ª–æ—Ç—ñ–≤ —É —Å—Ç–∞—Ç—É—Å—ñ 'pending'"""
        async with self.pool.acquire() as conn:
            deleted = await conn.execute("DELETE FROM lots WHERE status = 'pending'")
            logger.info(f"–û—á–∏—Å—Ç–∏–ª–∏ —á–µ—Ä–≥—É, –≤–∏–¥–∞–ª–µ–Ω–æ: {deleted}")
            return int(deleted.split(" ")[-1])
    
        
    async def delete_rejected_lots(self) -> int:
        async with self.pool.acquire() as conn:
            result = await conn.execute("DELETE FROM lots WHERE status = 'rejected'")
            return int(result.split()[-1])

    async def create_tables(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å"""
        async with self.pool.acquire() as conn:
            # –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    telegram_id BIGINT UNIQUE NOT NULL,
                    phone VARCHAR(20),
                    email VARCHAR(255),
                    trusted VARCHAR(10) DEFAULT 'false',
                    daily_limit INTEGER DEFAULT 5,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    username VARCHAR(255)
                )
            """)
        
            # –¢–∞–±–ª–∏—Ü—è –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS trusted_users (
                    id SERIAL PRIMARY KEY,
                    phone VARCHAR(20),
                    email VARCHAR(255),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
        
            # –¢–∞–±–ª–∏—Ü—è –ª–æ—Ç—ñ–≤
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS lots (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER REFERENCES users(id),
                    title VARCHAR(255) NOT NULL,
                    left_percent INTEGER,
                    opened_at VARCHAR(100),
                    expire_at VARCHAR(100),
                    reason TEXT,
                    skin_type VARCHAR(100),
                    price_buy DECIMAL(10,2),
                    price_sell DECIMAL(10,2),
                    category VARCHAR(100),
                    city VARCHAR(100),
                    delivery TEXT,
                    status VARCHAR(50) DEFAULT 'pending',
                    images TEXT[],
                    generated_text TEXT,
                    message_id BIGINT,
                    exchange TEXT,
                    description TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
        
            # –¢–∞–±–ª–∏—Ü—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS user_stats (
                    user_id INTEGER PRIMARY KEY REFERENCES users(id),
                    total_posts INTEGER DEFAULT 0,
                    total_sales INTEGER DEFAULT 0,
                    rating DECIMAL(3,2) DEFAULT 0.0,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
        
            # –¢–∞–±–ª–∏—Ü—è —Ä–µ–∞–∫—Ü—ñ–π
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS reactions (
                    id SERIAL PRIMARY KEY,
                    type VARCHAR(50),
                    text TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
    
    # === –ö–û–†–ò–°–¢–£–í–ê–ß–Ü ===
    async def get_user(self, telegram_id: int) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow(
                "SELECT * FROM users WHERE telegram_id = $1", telegram_id
            )
            if row:
                return dict(row)
            else:
                logger.warning(f"‚ùó –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ telegram_id={telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return None

    
            
    async def get_all_users(self) -> list[dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ username"""
        async with self.pool.acquire() as conn:
            try:
                rows = await conn.fetch("""
                    SELECT id AS id, telegram_id, phone, email, trusted, daily_limit, created_at, username
                    FROM users
                    ORDER BY created_at DESC
                """)
                return [dict(row) for row in rows]
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
                return []


    async def find_user_by_email_or_phone(self, identifier: str) -> Optional[Dict]:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ None –∞–±–æ –ø—É—Å—Ç–∏–π —Ä—è–¥–æ–∫
        if not identifier:
            logger.warning("‚ùó –ü–µ—Ä–µ–¥–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ None identifier")
            return None
    
        identifier = identifier.strip().lstrip("@")  # ‚¨ÖÔ∏è –ø—Ä–∏–±–∏—Ä–∞—î–º–æ @ —è–∫—â–æ —î
    
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
        if not identifier:
            logger.warning("‚ùó Identifier –ø–æ—Ä–æ–∂–Ω—ñ–π –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏")
            return None
    
        async with self.pool.acquire() as conn:
            try:
                row = await conn.fetchrow("""
                    SELECT id, telegram_id, phone, email, trusted, username
                    FROM users
                    WHERE phone = $1 OR email = $1 OR username = $1
                """, identifier)
                return dict(row) if row else None
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
                return None




    async def set_user_trusted(self, telegram_id: int, trusted: str = 'true'):
        """–ü–æ–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –¥–æ–≤—ñ—Ä–µ–Ω–æ–≥–æ –∞–±–æ –Ω–∞–≤–ø–∞–∫–∏"""
        async with self.pool.acquire() as conn:
            try:
                await conn.execute(
                    "UPDATE users SET trusted = $1 WHERE telegram_id = $2",
                    trusted, telegram_id
                )
                logger.info(f"‚úÖ –ó–º—ñ–Ω–µ–Ω–æ —Å—Ç–∞—Ç—É—Å trusted={trusted} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ trusted –¥–ª—è {telegram_id}: {e}")




    async def get_telegram_id_by_user_id(self, user_id: int) -> Optional[int]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ telegram_id –∑–∞ user_id"""
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow(
                "SELECT telegram_id FROM users WHERE id = $1", user_id
            )
            if row:
                return row["telegram_id"]
            else:
                logger.warning(f"‚ùó telegram_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è user_id={user_id}")
                return None

    async def get_user_rating(self, user_id: int) -> float:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –Ø–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî 0.0"""
        query = """
            SELECT rating
            FROM user_stats
            WHERE user_id = $1
        """
        row = await self.pool.fetchrow(query, user_id)
        return float(row['rating']) if row and row['rating'] is not None else 0.0

 

    
    async def create_user(self, telegram_id: int, phone: str, email: str, username: str = None) -> Dict:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ, —è–∫—â–æ –≤–∂–µ —î"""
        is_trusted = await self.check_trusted_user(phone, email)
        is_trusted_str = "true" if is_trusted else "false"  # üîß –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ bool ‚Üí str
        daily_limit = 10 if is_trusted else 5

        async with self.pool.acquire() as conn:
            try:
                # –í—Å—Ç–∞–≤–∫–∞ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è username
                row = await conn.fetchrow("""
                    INSERT INTO users (telegram_id, phone, email, trusted, daily_limit, username)
                    VALUES ($1, $2, $3, $4, $5, $6)
                    ON CONFLICT (telegram_id) DO UPDATE SET
                        phone = EXCLUDED.phone,
                        email = EXCLUDED.email,
                        trusted = EXCLUDED.trusted,
                        daily_limit = EXCLUDED.daily_limit,
                        username = EXCLUDED.username
                    RETURNING *
                """, telegram_id, phone, email, is_trusted_str, daily_limit, username)

                if row:
                    await conn.execute("""
                        INSERT INTO user_stats (user_id, total_posts, total_sales, rating)
                        VALUES ($1, 0, 0, 0.0)
                        ON CONFLICT DO NOTHING
                    """, row['id'])
                    return dict(row)

                # fallback (–º–∞—î –±—É—Ç–∏ —Ä—ñ–¥–∫–æ)
                existing_user = await conn.fetchrow("""
                    SELECT * FROM users WHERE telegram_id = $1
                """, telegram_id)
                return dict(existing_user) if existing_user else None

            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
                raise



    async def check_trusted_user(self, phone: str, email: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–≤—ñ—Ä–µ–Ω–∏–º"""
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow("""
                SELECT id FROM trusted_users 
                WHERE phone = $1 OR email = $2
            """, phone, email)
            return row is not None
    
    # === –î–û–í–Ü–†–ï–ù–Ü –ö–û–†–ò–°–¢–£–í–ê–ß–Ü ===
    async def update_trusted_users_from_csv(self, csv_data: str):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ CSV"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ CSV
            import io
            df = pd.read_csv(io.StringIO(csv_data))
            
            async with self.pool.acquire() as conn:
                # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
                # await conn.execute("DELETE FROM trusted_users")
                
                for _, row in df.iterrows():
                    phone = row.get('phone', '')
                    email = row.get('email', '')
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î
                    exists = await conn.fetchrow("""
                        SELECT id FROM trusted_users 
                        WHERE phone = $1 OR email = $2
                    """, phone, email)
                    
                    if not exists:
                        await conn.execute("""
                            INSERT INTO trusted_users (phone, email)
                            VALUES ($1, $2)
                        """, phone, email)
                
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                await conn.execute("""
                    UPDATE users SET trusted = 'true', daily_limit = 10
                    WHERE phone IN (SELECT phone FROM trusted_users)
                    OR email IN (SELECT email FROM trusted_users)
                """)
                
            logger.info("–î–æ–≤—ñ—Ä–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            raise

    # === –ë–ê–ù –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í ===   
    async def update_user_ban(self, user_id: int, trusted: str):
        """–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (trusted)"""
        async with self.pool.acquire() as conn:
            query = """
                UPDATE users
                SET trusted = $1
                WHERE id = $2
            """
            await conn.execute(query, trusted, user_id)




    # === –õ–û–¢–ò ===
    async def create_lot(self, lot_data: Dict) -> int:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ—Ç—É"""
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow("""
                INSERT INTO lots (
                    user_id, title, left_percent, opened_at, expire_at,
                    reason, skin_type, price_buy, price_sell, category,
                    city, delivery, images, generated_text,
                    exchange, description
                ) VALUES (
                    $1, $2, $3, $4, $5, $6, $7, $8,
                    $9, $10, $11, $12, $13, $14, $15, $16
                )
                RETURNING id
            """,
                lot_data['user_id'], lot_data['title'], lot_data['left_percent'],
                lot_data['opened_at'], lot_data['expire_at'], lot_data['reason'],
                lot_data['skin_type'], lot_data['price_buy'], lot_data['price_sell'],
                lot_data['category'], lot_data['city'], lot_data['delivery'],
                lot_data['images'], lot_data['generated_text'],
                lot_data['exchange'], lot_data['description']
            )

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await conn.execute("""
                UPDATE user_stats SET total_posts = total_posts + 1
                WHERE user_id = $1
            """, lot_data['user_id'])

            return row['id']

    
    async def get_user_lots(self, user_id: int) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        async with self.pool.acquire() as conn:
            rows = await conn.fetch("""
                SELECT * FROM lots WHERE user_id = $1 ORDER BY created_at DESC
            """, user_id)
            return [dict(row) for row in rows]
    
    async def update_lot_status(self, lot_id: int, status: str):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ª–æ—Ç—É"""
        async with self.pool.acquire() as conn:
            await conn.execute("""
                UPDATE lots SET status = $1 WHERE id = $2
            """, status, lot_id)
            
            # –Ø–∫—â–æ –ø—Ä–æ–¥–∞–Ω–æ - –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if status == 'sold':
                lot = await conn.fetchrow("SELECT user_id FROM lots WHERE id = $1", lot_id)
                if lot:
                    await conn.execute("""
                        UPDATE user_stats SET total_sales = total_sales + 1
                        WHERE user_id = $1
                    """, lot['user_id'])
                    
                    # –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥—É
                    await self.update_user_rating(lot['user_id'])
    
    async def get_lot(self, lot_id: int) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ—Ç—É –∑–∞ ID"""
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow("SELECT * FROM lots WHERE id = $1", lot_id)
            return dict(row) if row else None
    
    async def set_lot_message_id(self, lot_id: int, message_id: int):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ª–æ—Ç—É"""
        async with self.pool.acquire() as conn:
            await conn.execute("""
                UPDATE lots SET message_id = $1 WHERE id = $2
            """, message_id, lot_id)
    
    async def get_pending_lots(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ—Ç—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
        async with self.pool.acquire() as conn:
            rows = await conn.fetch("""
                SELECT l.*, u.telegram_id, u.phone, u.email 
                FROM lots l
                JOIN users u ON l.user_id = u.id
                WHERE l.status = 'pending'
                ORDER BY l.created_at ASC
            """)
            return [dict(row) for row in rows]
    
    async def check_daily_limit(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        async with self.pool.acquire() as conn:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª—ñ–º—ñ—Ç—É
            user = await conn.fetchrow("SELECT daily_limit FROM users WHERE id = $1", user_id)
            if not user:
                return False
            
            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—Å—Ç—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
            yesterday = datetime.now() - timedelta(days=1)
            count = await conn.fetchval("""
                SELECT COUNT(*) FROM lots 
                WHERE user_id = $1 AND created_at > $2
            """, user_id, yesterday)
            
            return count < user['daily_limit']
    

    async def get_lots_by_status(self, status: str) -> List[Dict]:
            """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ—Ç—ñ–≤ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º"""
            async with self.pool.acquire() as conn:
                rows = await conn.fetch("""
                    SELECT l.*, u.telegram_id, u.phone, u.email 
                    FROM lots l
                    JOIN users u ON l.user_id = u.id
                    WHERE l.status = $1
                    ORDER BY l.created_at ASC
                """, status)
                return [dict(row) for row in rows]    


    # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    async def update_user_rating(self, user_id: int):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤—ñ–¥ 0 –¥–æ 5 –∑ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è–º)"""
        async with self.pool.acquire() as conn:
            stats = await conn.fetchrow("""
                SELECT total_posts, total_sales FROM user_stats WHERE user_id = $1
            """, user_id)

            if stats and stats['total_posts'] > 0:
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥—É —è–∫ —á–∞—Å—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂—ñ–≤ –≤—ñ–¥ –ø–æ—Å—Ç—ñ–≤, –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–∞ –Ω–∞ 5
                raw_rating = (stats['total_sales'] / stats['total_posts']) * 5
                rating = round(min(raw_rating, 5.0), 2)

                await conn.execute("""
                    UPDATE user_stats SET rating = $1, updated_at = CURRENT_TIMESTAMP
                    WHERE user_id = $2
                """, rating, user_id)

    
    async def get_user_stats(self, user_id: int) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow("""
                SELECT * FROM user_stats WHERE user_id = $1
            """, user_id)
            return dict(row) if row else None
        
    async def get_user_by_internal_id(self, internal_id: int) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ id (–Ω–µ telegram_id)"""
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow(
                "SELECT * FROM users WHERE id = $1", internal_id
            )
            if row:
                return dict(row)
            else:
                logger.warning(f"‚ùó –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ id={internal_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return None
    
    async def get_general_stats(self) -> Dict:
        """–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏"""
        async with self.pool.acquire() as conn:
            total_users = await conn.fetchval("SELECT COUNT(*) FROM users")
            total_lots = await conn.fetchval("SELECT COUNT(*) FROM lots")
            total_sold = await conn.fetchval("SELECT COUNT(*) FROM lots WHERE status = 'sold'")
            trusted_users = await conn.fetchval("SELECT COUNT(*) FROM users WHERE trusted = 'true'")
            
            return {
                'total_users': total_users,
                'total_lots': total_lots,
                'total_sold': total_sold,
                'trusted_users': trusted_users
            }
    
    async def add_lot_message(self, lot_id: int, message_id: int):
        async with self.pool.acquire() as conn:
            await conn.execute(
                "INSERT INTO lot_messages (lot_id, message_id) VALUES ($1, $2)",
                lot_id, message_id
            )
    async def get_lot_messages(self, lot_id: int) -> list[int]:
        async with self.pool.acquire() as conn:
            rows = await conn.fetch(
                "SELECT message_id FROM lot_messages WHERE lot_id = $1",
                lot_id
                )
            return [row["message_id"] for row in rows]


    async def delete_lot(self, lot_id: int):
        """–ü–æ–≤–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ª–æ—Ç—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (PostgreSQL + asyncpg)"""
        try:
            async with self.pool.acquire() as conn:
                await conn.execute("DELETE FROM lots WHERE id = $1", lot_id)
                logger.info(f"‚úÖ –õ–æ—Ç {lot_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ª–æ—Ç—É –∑ –ë–î: {e}")
            raise
