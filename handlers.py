from aiogram import Router, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime
from aiogram.types import (
    Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, 
    InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, InputMediaPhoto
)
import logging
import os

from utils.keyboards import (
    status_human, render_stars, get_contact_seller_keyboard,
    get_main_keyboard, get_cancel_keyboard, get_confirm_keyboard,
    get_city_keyboard, get_skin_type_keyboard, get_delivery_keyboard,
    get_category_keyboard, get_phone_keyboard
)

from utils.messages import get_welcome_message
from utils.lot_processor import LotProcessor
from utils.admin_utils import AdminUtils
from utils.text_utils import clean_surrogates

logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π router
router = Router()

# FSM States
class RegistrationStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_email = State()

from aiogram.fsm.state import State, StatesGroup

class LotStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_left_percent = State()
    waiting_for_opened_at = State()
    waiting_for_expire_at = State()
    waiting_for_reason = State()
    waiting_for_skin_type = State()

    exchange_or_sell = State()                  # üëà –Ω–æ–≤–∏–π: –≤–∏–±—ñ—Ä –º—ñ–∂ –æ–±–º—ñ–Ω–æ–º —ñ –ø—Ä–æ–¥–∞–∂–µ–º
    waiting_for_exchange_details = State()      # üëà –Ω–æ–≤–∏–π: —É–º–æ–≤–∏ –æ–±–º—ñ–Ω—É
    waiting_for_price_buy = State()
    waiting_for_price_sell = State()
    waiting_for_description = State()           # üëà –Ω–æ–≤–∏–π: –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å (–¥–ª—è –æ–±–º—ñ–Ω—É –∞–±–æ –ø—Ä–æ–¥–∞–∂—É)

    waiting_for_category = State()
    waiting_for_city = State()
    waiting_for_delivery = State()
    waiting_for_photos = State()
    confirming_lot = State()


class AdminStates(StatesGroup):
    
    waiting_for_broadcast = State()

    # === –û–°–ù–û–í–ù–Ü –ö–û–ú–ê–ù–î–ò ===

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    bot = message.bot

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
    user = await bot.db.get_user(message.from_user.id)

    banner_path = bot.config.BANNER_PATH
    photo = FSInputFile(banner_path) if banner_path and os.path.exists(banner_path) else None

    if user:
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
        if photo:
            await message.answer_photo(
                photo=photo,
                caption=get_welcome_message(user['trusted']),
                reply_markup=get_main_keyboard()
            )
        else:
            await message.answer(
                get_welcome_message(user['trusted']),
                reply_markup=get_main_keyboard()
            )
    else:
        # –ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
        await message.answer(
            "üëã –í—ñ—Ç–∞—î–º–æ –≤ Wonder_Loop !\n\n"
            "–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–π—Ç–∏ —à–≤–∏–¥–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.\n"
            "üì± –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
            reply_markup=get_phone_keyboard()
        )
        await state.set_state(RegistrationStates.waiting_for_phone)

@router.message(RegistrationStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    if message.contact:
        phone = message.contact.phone_number
    else:
        phone = message.text
    
    await state.update_data(phone=phone)
    await message.answer(
        "üìß –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_email)

@router.message(RegistrationStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ email —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"""
    email = message.text.strip()
    data = await state.get_data()
    username = message.from_user.username or None

    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ username
        user = await message.bot.db.create_user(
            telegram_id=message.from_user.id,
            phone=data['phone'],
            email=email,
            username=username
        )

        await state.clear()

        # ‚úÖ –Ø–≤–Ω–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—è trusted ‚Üí bool
        is_trusted = str(user.get("trusted")).lower() == "true"

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å
        status_text = (
            "‚úÖ —Ç–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –≤–∏—Å—Ç–∞–≤–ª—è—Ç–∏ —Å–≤–æ—ó –±–∞–Ω–∫–∏"
            if is_trusted
            else "‚è≥ —Ç–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –≤–∏—Å—Ç–∞–≤–ª—è—Ç–∏ —Å–≤–æ—ó –±–∞–Ω–∫–∏ ‚Äî –∞–ª–µ –∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º –Ω—é–∞–Ω—Å–æ–º:"
        )

        await message.answer_photo(
            photo=FSInputFile(message.bot.config.BANNER_PATH)
            if message.bot.config.BANNER_PATH else None,
            caption=(
                "‚úÖ –≤–∏ –≤ —Å–∏—Å—Ç–µ–º—ñ. —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –ø—Ä–æ–π–¥–µ–Ω–æ.\n\n"
                f"{status_text}\n\n" +
                get_welcome_message(is_trusted)
            ),
            reply_markup=get_main_keyboard()
        )

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")



# === –û–°–ù–û–í–ù–ï –ú–ï–ù–Æ ===

@router.message(F.text == "‚úâÔ∏è –î–æ–¥–∞—Ç–∏ –ª–æ—Ç")
async def start_lot_creation(message: Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ—Ç—É"""
    bot = message.bot
    user = await bot.db.get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–π–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∫–æ–º–∞–Ω–¥–æ—é /start")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user.get("trusted") in ['banperm', 'bantime']:
        if user.get("trusted") == 'bantime' and user.get('banned_until') and datetime.utcnow() < user['banned_until']:
            await message.answer("üö´ –í–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ª–æ—Ç–∏.")
            return
        if user.get("trusted") == 'banperm':
            await message.answer("üö´ –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –Ω–∞–∑–∞–≤–∂–¥–∏ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ª–æ—Ç–∏.")
            return

    # üü° –í–°–¢–ê–í–õ–Ø–Ñ–ú–û –°–Æ–î–ò: –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω user_id
    await state.update_data(user_id=user['id'])

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É
    if not await bot.db.check_daily_limit(user['id']):
        limit = user['daily_limit']
        await message.answer(f"‚è∞ –í–∏ –¥–æ—Å—è–≥–ª–∏ –¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É –≤ {limit} –ø–æ—Å—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
        return
    
    await message.answer(
        "üìù –ü–æ—á–Ω–µ–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ –ª–æ—Ç—É!\n\n"
        "üß¥ –ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É - –ø–æ–≤–Ω–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(LotStates.waiting_for_title)


@router.message(F.text == "üìÉ –ú–æ—ó –ª–æ—Ç–∏")
async def show_lot_categories(message: Message):
    """–ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ª–æ—Ç—ñ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ú® –ê–∫—Ç–∏–≤–Ω—ñ", callback_data="my_lots_active"),
            InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–∞–Ω—ñ", callback_data="my_lots_sold")
        ],
        [
            InlineKeyboardButton(text="üîí –ó–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω—ñ", callback_data="my_lots_reserved"),
            InlineKeyboardButton(text="üì¥ –ù–µ–∞–∫—Ç—É–∞–ª—å–Ω—ñ", callback_data="my_lots_inactive")
        ]
    ])

    await message.answer("üì¶ –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ª–æ—Ç—ñ–≤:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("my_lots_"))
async def show_lots_by_status(callback: CallbackQuery):
    status_map = {
        "my_lots_active": "active",
        "my_lots_sold": "sold",
        "my_lots_reserved": "reserved",
        "my_lots_inactive": "inactive"
    }

    key = callback.data
    status = status_map.get(key)
    user = await callback.bot.db.get_user(callback.from_user.id)

    if not user:
        await callback.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    lots = await callback.bot.db.get_user_lots(user_id=user['id'])
    filtered = [lot for lot in lots if lot['status'] == status]

    if not filtered:
        await callback.message.answer("üì≠ –õ–æ—Ç—ñ–≤ —ñ–∑ —Ü–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–∫–∏ –Ω–µ–º–∞—î.")
        return

    for lot in filtered[:10]:
        status_emoji = get_status_emoji(lot['status'])
        text = (
            f"{status_emoji} **{lot['title']}**\n"
            f"üí∞ {lot['price_sell']} –≥—Ä–Ω\n"
            f"üìÖ {lot['created_at'].strftime('%d.%m.%Y')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {get_status_text(lot['status'])}"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÅ –ê–∫—Ç—É–∞–ª—å–Ω–æ", callback_data=f"lot_status_{lot['id']}_active"),
                InlineKeyboardButton(text="üîí –ó–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ", callback_data=f"lot_status_{lot['id']}_reserved")
            ],
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–∞–Ω–æ", callback_data=f"lot_status_{lot['id']}_sold"),
                InlineKeyboardButton(text="üì¥ –ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ", callback_data=f"lot_status_{lot['id']}_inactive")
            ]
        ])
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="Markdown")


@router.message(F.text == "‚úçÔ∏è –ü—Ä–∞–≤–∏–ª–∞")
async def show_rules(message: Message):
    """–ü–æ–∫–∞–∑ –ø—Ä–∞–≤–∏–ª"""
    rules_text = """
üìã WONDER_LOOP
safe-space –≤ Telegram –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ –º–∞–∑–∞–≤ - –∞–ª–µ –Ω–µ –∑—ñ–π—à–ª–æ—Å—å
‚ùóÔ∏è –ø–æ—Ä—É—à–∏–≤ –ø—Ä–∞–≤–∏–ª–∞ ‚Üí 1 –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è ‚Üí –±–∞–Ω

‚òùÔ∏è –≤–∞—à username –º–∞—î –±—É—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º ‚Äî —â–æ–± –∑ –≤–∞–º–∏ –º–æ–≥–ª–∏ –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—å –ø–æ–∫—É–ø—Ü—ñ. —ñ–Ω–∞–∫—à–µ ‚Äî —à–∞–Ω—Å–∏ –ø—Ä–æ–¥–∞—Ç–∏ –∑–¥—É–ª–∏—Å—å.

üõ†Ô∏è –æ–Ω–æ–≤–ª—é–π—Ç–µ —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–∞ –≤ –±–æ—Ç—ñ –≤—á–∞—Å–Ω–æ: ‚Äú–±—Ä–æ–Ω—å‚Äù, ‚Äú–ø—Ä–æ–¥–∞–Ω–æ‚Äù ‚Äî —É—Å–µ –º—ñ–Ω—è—î—Ç—å—Å—è –≤—Ä—É—á–Ω—É –≤ –∞–¥–º—ñ–Ω—Ü—ñ.
—Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –ø–æ—Å—Ç–∏ –Ω–µ –≤–∏–¥–∞–ª—è—é—Ç—å—Å—è ‚Äî —Ü–µ —Ä–æ–±–∏—Ç—å —Å–∏—Å—Ç–µ–º–∞, –∫–æ–ª–∏ –≤–∏ –ø–æ–∑–Ω–∞—á–∞—î—Ç–µ —ó—Ö —è–∫ ‚Äú–ø—Ä–æ–¥–∞–Ω–æ‚Äù.

–©–û –ú–û–ñ–ù–ê: 
‚úîÔ∏è –≤–∂–∏–≤–∞–Ω–∏–π –¥–æ–≥–ª—è–¥: –æ–±–ª–∏—á—á—è, —Ç—ñ–ª–æ, –≤–æ–ª–æ—Å—Å—è ‚Äî —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–ª–∏—Å—å —ñ –Ω–µ –∑–∞–π—à–ª–æ 
‚úîÔ∏è –≥–∞–¥–∂–µ—Ç–∏ –¥–ª—è –æ–±–ª–∏—á—á—è ‚Äî —Ä–æ–ª–µ—Ä–∏, —â—ñ—Ç–æ—á–∫–∏, –¥–∞—Ä—Å–æ–Ω–≤–∞–ª—ñ, –º–∞—Å–∫–∏ ‚Äî —è–∫—â–æ —Å–ø—Ä–∞–≤–Ω—ñ 
‚úîÔ∏è –±–∞–Ω–∫–∏ –∑ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º –¥–æ—Å—Ç—É–ø–æ–º ‚Äî —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–æ—Ä–º —Å—Ç–∞–Ω —ñ –≤–∏–¥–Ω–æ –∑–∞–ª–∏—à–æ–∫ 
‚úîÔ∏è –º—ñ–Ω—ñ–∫–∏, —Å–∞—à–µ, —Ç—Ä–µ–≤–µ–ª-—Ñ–æ—Ä–º–∞—Ç–∏ ‚Äî –æ–∫, —è–∫—â–æ –≤–∂–µ –≤–∞—à—ñ —ñ –Ω–µ –∑ –≥–æ—Ç–µ–ª—é —É –®–∞—Ä–º-–µ—à-–®–µ–π—Ö—É –∑ 2019 —Ä–æ–∫—É
‚úîÔ∏è –æ–±–º—ñ–Ω ‚Äî —è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–º—ñ–Ω—è—Ç–∏ –Ω–∞ —â–æ—Å—å —ñ–Ω—à–µ, –∫–∞–∂—ñ—Ç—å —á–µ—Å–Ω–æ, —â–æ —à—É–∫–∞—î—Ç–µ

–©–û –ù–ï –ú–û–ñ–ù–ê:
‚ùå –Ω–æ–≤—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ (–Ω–æ–≤–µ–Ω—å–∫–µ ‚Äî –≤ —ñ–Ω—Å—Ç—É, –∞ –Ω–µ —Å—é–¥–∏)
‚ùå –∑–∞—Å–æ–±–∏ –∑ —Ä—Ñ/–±—ñ–ª–æ—Ä—É—Å—ñ
‚ùå —Ä–µ—Ü–µ–ø—Ç—É—Ä–Ω—ñ —à—Ç—É–∫–∏, –∞–Ω—Ç–∏–±—ñ–æ—Ç–∏–∫–∏, –ë–ê–î–∏, —ó–∂–∞ ‚Äî —Ü–µ –Ω–µ —Ç–æ–π —á–∞—Ç
‚ùå –ø–∞—Ä—Ñ—É–º–∏, –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–∫–∞ ‚Äî —ñ–Ω—à–µ –ø–æ–ª–µ –±–æ—é
‚ùå —Ä–µ–∫–ª–∞–º–∞, –º–∞—Ä–∞—Ñ–æ–Ω–∏, —Ñ–æ–ª–æ–≤-–±–µ–∫, –∫—É—Ä—Å–∏, ‚Äú—è –≤—ñ–∑–∞–∂–∏—Å—Ç‚Äù ‚Üí –º–∏—Ç—Ç—î–≤–∏–π –±–∞–Ω

üéØ –†–ï–ô–¢–ò–ù–ì:
–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂—ñ–≤!

‚úÖ–Ø–ö –í–ò–°–¢–ê–í–ò–¢–ò –õ–û–¢:
üì∏ —Ñ–æ—Ç–æ ‚Äî —á—ñ—Ç–∫—ñ, —Å–≤–æ—ó, –Ω–∞ —Å–≤—ñ—Ç–ª–æ–º—É —Ñ–æ–Ω—ñ —ñ –Ω–µ –Ω–∞ —Ñ–æ–Ω—ñ –ø–ª–µ–¥–∞, –Ω—ñ–≥ –∞–±–æ —á—É–∂–æ—ó —Å–ø–∏–Ω–∏
üß¥ –Ω–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É ‚Äî –ø–æ–≤–Ω–∞
üìÖ –¥–∞—Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∞–±–æ batch-–∫–æ–¥
üíß –∑–∞–ª–∏—à–æ–∫ ‚Äî —Å–ª–æ–≤–µ—Å–Ω–æ —ñ –≤—ñ–∑—É–∞–ª—å–Ω–æ (1 —ñ–∑ 3 —Ñ–æ—Ç–æ –º–∞—î —Ü–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏)
üìñ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å + ‚úçÔ∏è –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂—É, —è–∫—â–æ —Ö–æ—á–µ—Ç—å—Å—è –≤–∏–≥–æ–≤–æ—Ä–∏—Ç–∏—Å—å
üß† —Ç–∏–ø —à–∫—ñ—Ä–∏ —ñ —á–æ–º—É –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ (–±—É–¥—å—Ç–µ —á–µ—Å–Ω–∏–º ‚Äî –Ω–∞–º –Ω–µ —Ç—Ä–µ–±–∞ —ñ–¥–µ–∞–ª—å–Ω–∞ —Ä–µ–ø—É—Ç–∞—Ü—ñ—è –±–∞–Ω–æ–∫)
üìç –º—ñ—Å—Ç–æ —Ç–∞ —Å–ø–æ—Å—ñ–± –ø–µ—Ä–µ–¥–∞—á—ñ / –¥–æ—Å—Ç–∞–≤–∫–∏
üí∞ —Ü—ñ–Ω–∞ –∞–±–æ —É–º–æ–≤–∏ –æ–±–º—ñ–Ω—É

üóì–§–û–†–ú–ê–¢ –ü–£–ë–õ–Ü–ö–ê–¶–Ü–á:
‚Äì 1 –ø–æ—Å—Ç = 1 –∑–∞—Å—ñ–±, –º–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ
‚Äì —è–∫—â–æ –Ω–∞–±—ñ—Ä (–ø—Ä–æ–¥–∞—î—Ç—å—Å—è —Ä–∞–∑–æ–º), —Ç–æ–¥—ñ –≤—Å—ñ –±–∞–Ω–∫–∏ –Ω–∞ –æ–¥–Ω–æ–º—É —Ñ–æ—Ç–æ, –±–µ–∑ –∫–æ–ª–∞–∂—ñ–≤
- –º–∞–∫—Å–∏–º—É–º 5 –Ω–∞ –¥–µ–Ω—å (–∫–ª—ñ—î–Ω—Ç–∞–º DD ‚Äî 10 üòâ)
–¥–ª—è –≥–∞–¥–∂–µ—Ç—ñ–≤: 
‚Äì –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ: —â–æ —Ü–µ, —Å–∫—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–ª–∏—Å—å, —á–∏ –ø—Ä–∞—Ü—é—î, —á–∏ —î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è/–∫–æ—Ä–æ–±–∫–∞ 
‚Äì —ñ, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ—Ç—Ä—ñ—Ç—å —Ç–∞ –ø–æ—á–∏—Å—Ç—ñ—Ç—å –ø–µ—Ä–µ–¥ —Ñ–æ—Ç–æ 

üîÅ –Ø–ö –û–ù–û–í–ò–¢–ò –õ–û–¢?
–Ω—ñ—á–æ–≥–æ –≤—Ä—É—á–Ω—É –ø–∏—Å–∞—Ç–∏ –Ω–µ —Ç—Ä–µ–±–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–π–¥—ñ—Ç—å —É —Å–≤—ñ–π —Ä–æ–∑–¥—ñ–ª ‚Äú–º–æ—ó –ª–æ—Ç–∏‚Äù –≤ –±–æ—Ç—ñ, –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π ‚Äî —ñ –∑–º—ñ–Ω—ñ—Ç—å –π–æ–≥–æ —Å—Ç–∞—Ç—É—Å [–∞–∫—Ç—É–∞–ª—å–Ω–æ, –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ, –±—Ä–æ–Ω—å —Ç–∞ –ø—Ä–æ–¥–∞–Ω–æ] —ñ  –±–æ—Ç —Å–∞–º —É—Å–µ –ø—ñ–¥–ø—Ä–∞–≤–∏—Ç—å —É –∫–∞–Ω–∞–ª—ñ: —ñ –Ω–∞–ø–∏—Å, —ñ —Å—Ç–∞—Ç—É—Å.
üí¨ —è–∫—â–æ —â–æ—Å—å –Ω–µ—è—Å–Ω–æ ‚Äî –∫—Ä–∞—â–µ —Å–ø–∏—Ç–∞–π—Ç–µ, –Ω—ñ–∂ –ø–æ—Ä—É—à—Ç–µ. –±–æ –¥—Ä—É–≥–µ ‚Äî —Ü–µ –±–∞–Ω.

‚úÖ <b>–ü–æ–≤–Ω–∏–π –ø–µ—Ä–µ–ª—ñ–∫ –ø—Ä–∞–≤–∏–ª:</b> <a href="https://drive.google.com/file/d/14cY8PD9fut8BNZnUWHFI5to5_jptxkgW/view?usp=sharing">–≤—ñ–¥–∫—Ä–∏—Ç–∏ PDF</a>
"""
    await message.answer(rules_text, parse_mode="HTML")


# === –°–¢–í–û–†–ï–ù–ù–Ø –õ–û–¢–£ ===



# === –°–ö–ê–°–£–í–ê–ù–ù–Ø ===

@router.message(F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
@router.callback_query(F.data == "cancel")
async def cancel_action(update, state: FSMContext):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥—ñ—ó —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    
    current_state = await state.get_state()
    await state.clear()  # —Å–∫–∏–¥–∞—î–º–æ FSM —É –±—É–¥—å-—è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É

    if isinstance(update, Message):
        text = "‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."
        await update.answer(text, reply_markup=get_main_keyboard())
    else:
        # –Ø–∫—â–æ —Ü–µ callback ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –Ω–æ–≤–µ –∑ –º–µ–Ω—é
        await update.message.edit_text("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        await update.message.answer("üëá –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_keyboard())
        await update.answer()



@router.message(LotStates.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    current = await state.get_state()
    if current != LotStates.waiting_for_title:
        return

    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–∑–≤–∏ —Ç–æ–≤–∞—Ä—É"""
    await state.update_data(title=message.text)
    await message.answer(
    "üíß –ó–∞–ª–∏—à–æ–∫ ‚Äî —Å–ª–æ–≤–µ—Å–Ω–æ <i>–≤—ñ–¥ 1 –¥–æ 100</i> —ñ –≤—ñ–∑—É–∞–ª—å–Ω–æ <i>1 —ñ–∑ 3 —Ñ–æ—Ç–æ –º–∞—î —Ü–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏</i>:",
    parse_mode="HTML"
    )
    await state.set_state(LotStates.waiting_for_left_percent)

@router.message(LotStates.waiting_for_left_percent)
async def process_left_percent(message: Message, state: FSMContext):
    current = await state.get_state()
    if current != LotStates.waiting_for_left_percent:
        return  # FSM —É–∂–µ –º–æ–≥–ª–∞ –±—É—Ç–∏ —Å–∫–∏–Ω—É—Ç–∞, –Ω–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
    """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥—Å–æ—Ç–∫—É —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è"""
    try:
        percent = int(message.text)
        if not 1 <= percent <= 100:
            raise ValueError
        
        await state.update_data(left_percent=percent)
        await message.answer(
            "üìÖ –ö–æ–ª–∏ –±—É–ª–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ –±–∞–Ω–æ—á–∫—É –¥–∞—Ç–∞, –º—ñ—Å—è—Ü—å?\n"
            "<i>(–Ω–∞–ø–∏—à—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ –¥–∞—Ç—É –∞–±–æ ‚Äú–Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ‚Äù  –∞–±–æ batch-–∫–æ–¥)</i>",
            parse_mode="HTML"
        )

        await state.set_state(LotStates.waiting_for_opened_at)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100")

@router.message(LotStates.waiting_for_opened_at)
async def process_opened_at(message: Message, state: FSMContext):
    current = await state.get_state()
    if current != LotStates.waiting_for_opened_at:
        return  # FSM —Å–∫–∏–Ω—É—Ç–∞ –∞–±–æ —ñ–Ω—à–∏–π —Å—Ç–∞–Ω ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
    """–û–±—Ä–æ–±–∫–∞ —á–∞—Å—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è"""
    await state.update_data(opened_at=message.text)
    await message.answer(
        "üóì –°—Ç—Ä–æ–∫ –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ, —Ç—ñ–ª—å–∫–∏ –¥–∞—Ç–∞, –º—ñ—Å—è—Ü—å:"
    )
    await state.set_state(LotStates.waiting_for_expire_at)

@router.message(LotStates.waiting_for_expire_at)
async def process_expire_at(message: Message, state: FSMContext):
    current = await state.get_state()
    if current != LotStates.waiting_for_expire_at:
        return  # FSM —Å–∫–∏–Ω—É—Ç–∞ –∞–±–æ –∑–º—ñ–Ω–∏–≤—Å—è —Å—Ç–∞–Ω ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ

    """–û–±—Ä–æ–±–∫–∞ —Ç–µ—Ä–º—ñ–Ω—É –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ"""
    await state.update_data(expire_at=message.text)
    await message.answer(
        "‚úçÔ∏è –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂—É, –æ–ø–∏—à—ñ—Ç—å –∫—ñ–ª—å–∫–æ–º–∞ —Å–ª–æ–≤–∞–º–∏\n<i>(–±—É–¥—å—Ç–µ —á–µ—Å–Ω–∏–º ‚Äî –Ω–∞–º –Ω–µ —Ç—Ä–µ–±–∞ —ñ–¥–µ–∞–ª—å–Ω–∞ —Ä–µ–ø—É—Ç–∞—Ü—ñ—è –±–∞–Ω–∫–∏)</i>",
        parse_mode="HTML"
    )

    await state.set_state(LotStates.waiting_for_reason)

@router.message(LotStates.waiting_for_reason)
async def process_reason(message: Message, state: FSMContext):
    current = await state.get_state()
    if current != LotStates.waiting_for_reason:
        return

    """–û–±—Ä–æ–±–∫–∞ –ø—Ä–∏—á–∏–Ω–∏ –ø—Ä–æ–¥–∞–∂—É"""
    await state.update_data(reason=message.text)
    await message.answer(
        "üß† –î–ª—è —è–∫–æ–≥–æ —Ç–∏–ø—É —à–∫—ñ—Ä–∏ –∑–∞—Å—ñ–±",
        reply_markup=get_skin_type_keyboard()
    )
    await state.set_state(LotStates.waiting_for_skin_type)

# –ü—ñ—Å–ª—è —Ç–∏–ø—É —à–∫—ñ—Ä–∏: –∑–∞–ø–∏—Ç ‚Äî –æ–±–º—ñ–Ω —á–∏ –ø—Ä–æ–¥–∞–∂
@router.message(LotStates.waiting_for_skin_type)
async def process_skin_type(message: Message, state: FSMContext):
    await state.update_data(skin_type=message.text)
    await message.answer(
        "üîÅ –í–∏ —Ö–æ—á–µ—Ç–µ –æ–±–º—ñ–Ω —á–∏ –ø—Ä–æ–¥–∞–∂?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û–±–º—ñ–Ω")], [KeyboardButton(text="–ü—Ä–æ–¥–∞–∂")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(LotStates.exchange_or_sell)


# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –æ–±–º—ñ–Ω / –ø—Ä–æ–¥–∞–∂
@router.message(LotStates.exchange_or_sell)
async def process_exchange_or_sell(message: Message, state: FSMContext):
    choice = message.text.strip().lower()

    if "–æ–±–º—ñ–Ω" in choice:
        await state.update_data(exchange=True)
        await message.answer("‚úèÔ∏è –û–ø–∏—à—ñ—Ç—å —É–º–æ–≤–∏ –æ–±–º—ñ–Ω—É, –∫—ñ–ª—å–∫–æ–º–∞ —Å–ª–æ–≤–∞–º–∏:", reply_markup=get_cancel_keyboard())
        await state.set_state(LotStates.waiting_for_exchange_details)

    elif "–ø—Ä–æ–¥–∞–∂" in choice:
        await state.update_data(exchange=False)
        await message.answer("üí∞ –ó–∞ —Å–∫—ñ–ª—å–∫–∏ –∫—É–ø—É–≤–∞–ª–∏? (–≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤ –≥—Ä–∏–≤–Ω—è—Ö):", reply_markup=get_cancel_keyboard())
        await state.set_state(LotStates.waiting_for_price_buy)

    else:
        await message.answer("‚ùå –í–∏–±–µ—Ä—ñ—Ç—å –û–±–º—ñ–Ω –∞–±–æ –ü—Ä–æ–¥–∞–∂.")


# –Ø–∫—â–æ –æ–±–º—ñ–Ω: –æ—Ç—Ä–∏–º—É—î–º–æ —É–º–æ–≤–∏
@router.message(LotStates.waiting_for_exchange_details)
async def process_exchange_details(message: Message, state: FSMContext):
    await state.update_data(exchange_details=message.text)
    await message.answer("üìñ –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å, –∫—ñ–ª—å–∫–æ–º–∞ —Å–ª–æ–≤–∞–º–∏ :", reply_markup=get_cancel_keyboard())
    await state.set_state(LotStates.waiting_for_description)


# –Ø–∫—â–æ –ø—Ä–æ–¥–∞–∂: —Ü—ñ–Ω–∞ –∫—É–ø—ñ–≤–ª—ñ
@router.message(LotStates.waiting_for_price_buy)
async def process_price_buy(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price_buy=price)
        await message.answer("üí∏ –ó–∞ —Å–∫—ñ–ª—å–∫–∏ –ø—Ä–æ–¥–∞—î—Ç–µ? (–≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤ –≥—Ä–∏–≤–Ω—è—Ö):")
        await state.set_state(LotStates.waiting_for_price_sell)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É")


# –Ø–∫—â–æ –ø—Ä–æ–¥–∞–∂: —Ü—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É
@router.message(LotStates.waiting_for_price_sell)
async def process_price_sell(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price_sell=price)
        await message.answer("üìñ –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å, –∫—ñ–ª—å–∫–æ–º–∞ —Å–ª–æ–≤–∞–º–∏ :", reply_markup=get_cancel_keyboard())
        await state.set_state(LotStates.waiting_for_description)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É")


# –ü—ñ—Å–ª—è –æ–±–º—ñ–Ω—É –∞–±–æ –ø—Ä–æ–¥–∞–∂—É: –æ–ø–∏—Å
@router.message(LotStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üóÇ –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=get_category_keyboard())
    await state.set_state(LotStates.waiting_for_category)


@router.message(LotStates.waiting_for_category)
async def process_category(message: Message, state: FSMContext):
    current = await state.get_state()
    if current != LotStates.waiting_for_category:
        return

    """–û–±—Ä–æ–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    await state.update_data(category=message.text)
    await message.answer(
        "üìç –ú—ñ—Å—Ç–æ",
        reply_markup=get_city_keyboard()
    )
    await state.set_state(LotStates.waiting_for_city)

@router.message(LotStates.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    current = await state.get_state()
    if current != LotStates.waiting_for_city:
        return
    """–û–±—Ä–æ–±–∫–∞ –º—ñ—Å—Ç–∞"""
    await state.update_data(city=message.text)
    await message.answer(
        "üöö –Ø–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞?\n<i>(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: '–ù–æ–≤–∞ –ü–æ—à—Ç–∞', '–£–∫—Ä–ø–æ—à—Ç–∞', '—Å–∞–º–æ–≤–∏–≤—ñ–∑')</i>",
        reply_markup=get_delivery_keyboard(),
        parse_mode="HTML"
    )

    await state.set_state(LotStates.waiting_for_delivery)

@router.message(LotStates.waiting_for_delivery)
async def process_delivery(message: Message, state: FSMContext):
    current = await state.get_state()
    if current != LotStates.waiting_for_delivery:
        return

    """–û–±—Ä–æ–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    await state.update_data(delivery=message.text)
    await message.answer(
        "üì∏ –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å 3 —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É –ø–æ —á–µ—Ä–∑—ñ.\n\n"
        "‚ö†Ô∏è –í–∞–∂–ª–∏–≤–æ:\n"
        "‚Ä¢ –ß—ñ—Ç–∫–µ, —Å–≤–æ—î, –Ω–µ –Ω–∞ —Ñ–æ–Ω—ñ –ø–ª–µ–¥–∞, –Ω—ñ–≥ —á–∏ —á—É–∂–æ–≥–æ –∂–∏–≤–æ—Ç–∞\n"
        "‚Ä¢ –û–¥–Ω–µ –∑ 3 —Ñ–æ—Ç–æ –º–∞—î –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∑–∞–ª–∏—à–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—É\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç ‚Äî –∫–≤–∞–¥—Ä–∞—Ç –∞–±–æ 4:5 (—è–∫ –≤ —ñ–Ω—Å—Ç—ñ)\n"
        "‚Ä¢ –§–æ—Ç–æ –Ω–∞ –±—ñ–ª–æ–º—É –∞–±–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º—É —Å–≤—ñ—Ç–ª–æ–º—É —Ñ–æ–Ω—ñ\n"
        "‚Ä¢ –ë–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —ñ —á–∞—Å—Ç–∏–Ω —Ç—ñ–ª–∞\n"
        "‚Ä¢ –ì–∞—Ä–Ω–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞ üôè\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–µ—Ä—à–µ —Ñ–æ—Ç–æ:",
        reply_markup=get_cancel_keyboard()
    )

    await state.update_data(images=[])
    await state.set_state(LotStates.waiting_for_photos)


@router.message(LotStates.waiting_for_photos, F.photo)
async def process_photos(message: Message, state: FSMContext):
    current = await state.get_state()
    if current != LotStates.waiting_for_photos:
        return
     
    """–û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π"""
    data = await state.get_data()
    images = data.get('images', [])
    photo_message_ids = data.get('photo_message_ids', [])
    photo_message_ids.append(message.message_id)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—É —è–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Google Vision
    vision_service = message.bot.vision
    try:
        is_valid, reason = await vision_service.validate_photo(photo.file_id, message.bot)
        
        if not is_valid:
            await message.answer(
                "‚ùå –§–æ—Ç–æ –Ω–µ –ø—Ä–æ–π—à–ª–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É!\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ:\n"
                "‚Ä¢ –§–æ—Ç–æ —á—ñ—Ç–∫–µ —ñ –Ω–µ —Ä–æ–∑–º–∏—Ç–µ\n"
                "‚Ä¢ –ù–µ–º–∞—î –ª—é–¥–µ–π –∞–±–æ —á–∞—Å—Ç–∏–Ω —Ç—ñ–ª–∞\n"
                "‚Ä¢ –¢–æ–≤–∞—Ä –¥–æ–±—Ä–µ –≤–∏–¥–Ω–æ\n"
                "‚Ä¢ –í—ñ–¥—Å—É—Ç–Ω—ñ–π –Ω–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n\n"
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —ñ–Ω—à–µ —Ñ–æ—Ç–æ:"
            )
            return
            
        print(f"‚úÖ [Handler] –§–æ—Ç–æ –ø—Ä–æ–π—à–ª–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É: {reason}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ñ–æ—Ç–æ: {e}")
        print(f"‚ö†Ô∏è [Handler] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ: {e}")
        # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —è–∫—â–æ —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
    
    # –î–æ–¥–∞—î–º–æ –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫
    try:
        processed_photo = await vision_service.add_watermark_from_file_id(photo.file_id, message.bot)
        images.append(processed_photo)
        print(f"‚úÖ [Handler] –î–æ–¥–∞–Ω–æ –≤–∞—Ç–µ—Ä–º–∞—Ä–∫ –¥–æ —Ñ–æ—Ç–æ")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫—É: {e}")
        images.append(photo.file_id)
        print(f"‚ö†Ô∏è [Handler] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ —Ñ–æ—Ç–æ –±–µ–∑ –≤–∞—Ç–µ—Ä–º–∞—Ä–∫—É")
    
    await state.update_data(images=images, photo_message_ids=photo_message_ids)
    
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ñ–æ—Ç–æ
    await message.answer(
        f"‚úÖ –§–æ—Ç–æ #{len(images)} –¥–æ–¥–∞–Ω–æ!\n\n"
        
    )
   

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    if len(images) < 3:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–æ—Å—Ç–∞—Ç–Ω—å–æ —Ñ–æ—Ç–æ", callback_data="photos_done")],
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
        ])
        await message.answer(
            f"‚úÖ –§–æ—Ç–æ {len(images)}/3 –¥–æ–¥–∞–Ω–æ!\n\n"
            f"–ú–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–µ {3-len(images)} —Ñ–æ—Ç–æ –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏:",
            reply_markup=keyboard
        )
    else:
        await finish_photo_upload(message, state)


@router.callback_query(F.data == "photos_done")
async def finish_photo_upload_callback(callback: CallbackQuery, state: FSMContext):
    current = await state.get_state()
    if current != LotStates.waiting_for_photos:
        return

    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ '‚úÖ –î–æ—Å—Ç–∞—Ç–Ω—å–æ —Ñ–æ—Ç–æ'"""
    await callback.answer()  # –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –æ–¥—Ä–∞–∑—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫
    logger.info(f"‚û°Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} (@{callback.from_user.username}) –Ω–∞—Ç–∏—Å–Ω—É–≤ '‚úÖ –î–æ—Å—Ç–∞—Ç–Ω—å–æ —Ñ–æ—Ç–æ'")
    
    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –∑–∞—á–µ–∫–∞–π –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥‚Ä¶")
    await finish_photo_upload(callback.message, state)


async def finish_photo_upload(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é"""
    data = await state.get_data()
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"

    logger.info(f"üõ† –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Å—Ç–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} (@{username})")

    try:
        openai_service = message.bot.openai
        generated_text = await openai_service.generate_post_text(data)
        logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ç–µ–∫—Å—Ç –¥–ª—è {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É –¥–ª—è {user_id}: {e}")
        generated_text = create_default_post_text(data)

    await state.update_data(generated_text=generated_text)

    images = data.get('images', [])

    try:
        if images:
            if len(images) > 1:
                media = [InputMediaPhoto(media=img) for img in images]
                media[0].caption = generated_text
                media[0].parse_mode = "Markdown"

                await message.answer("üì∏ –û—Å—å —è–∫ –≤–∏–≥–ª—è–¥–∞—Ç–∏–º–µ —Ç–≤—ñ–π –ø–æ—Å—Ç:")
                await message.bot.send_media_group(chat_id=message.chat.id, media=media)

            else:
                await message.answer_photo(
                    photo=images[0],
                    caption=generated_text,
                    parse_mode="Markdown"
                )

            # –ö–Ω–æ–ø–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–∫—Ä–µ–º–æ
            await message.answer(
                "‚úÖ –Ø–∫—â–æ –≤—Å–µ –≤–∏–≥–ª—è–¥–∞—î –¥–æ–±—Ä–µ ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é:",
                reply_markup=get_confirm_keyboard()
            )
        else:
            await message.answer(
                generated_text,
                reply_markup=get_confirm_keyboard(),
                parse_mode="Markdown"
            )

    except TelegramBadRequest as e:
        logger.error(f"‚ùå TelegramBadRequest –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø—Ä–µ–≤ º—é: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –ø—Ä–µ–≤ º—é. –ü–µ—Ä–µ–≤—ñ—Ä —Ñ–æ—Ç–æ –∞–±–æ —Ç–µ–∫—Å—Ç.")

    await state.set_state(LotStates.confirming_lot)


@router.callback_query(F.data == "confirm_lot")
async def confirm_lot(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ—Ç—É"""
    await callback.answer()
    data = await state.get_data()

    # üß† –û–±—Ä–æ–±–∫–∞ exchange / price –ª–æ–≥—ñ–∫–∏
    if data.get("exchange") is True:
        data["exchange_option"] = data.get("exchange_details", "").strip()
    else:
        data["exchange_option"] = "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"

    exchange_option = data.get('exchange_option', '').strip().lower()
    is_exchange = bool(exchange_option and exchange_option != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏')

    # üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
    base_required_fields = [
        'title', 'left_percent', 'opened_at', 'expire_at', 'reason',
        'skin_type', 'category', 'city', 'delivery', 'images', 'generated_text'
    ]

    if not is_exchange:
        base_required_fields += ['price_buy', 'price_sell']

    missing = [key for key in base_required_fields if key not in data or data.get(key) in [None, '']]
    if missing:
        logger.error(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: {missing}")
        try:
            await callback.message.edit_caption("‚ùå –ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–µ—è–∫—ñ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ª–æ—Ç —â–µ —Ä–∞–∑.")
        except TelegramBadRequest:
            await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–µ—è–∫—ñ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ª–æ—Ç —â–µ —Ä–∞–∑.")
        await state.clear()
        return

    # üë§ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î
    try:
        user = await callback.bot.db.get_user(callback.from_user.id)
        user_id = user['id']
        username = callback.from_user.username or "–±–µ–∑ username"
    except Exception as e:
        logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î: {e}")
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        await state.clear()
        return

    logger.info(f"üì© –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} (@{username}) –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ—Ç—É")
    data['user_id'] = user_id
    data['exchange'] = is_exchange

    # üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ—Ç—É
    try:
        lot_processor = LotProcessor(callback.bot)
        lot_id = await lot_processor.create_lot(data)
        logger.info(f"‚úÖ –õ–æ—Ç #{lot_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_id}")
        await state.clear()

        # üßΩ –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∫–Ω–æ–ø–∫–∏/–º–µ–¥—ñ–∞)
        try:
            await callback.message.delete()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

        # üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        # üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user.get('trusted') is True or str(user.get('trusted')).lower() == 'true':

            user_telegram_id = callback.from_user.id
    
            # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
            print(f"üì≤ Raw user data: {user}")
            print(f"üì≤ Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_telegram_id}")
            print(f"üì≤ –¢–∏–ø telegram_id: {type(user_telegram_id)}")
    
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å
            if not user_telegram_id or not isinstance(user_telegram_id, int) or user_telegram_id <= 0:
                logger.error(f"‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π telegram_id: {user_telegram_id}")
                await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
                return

            try:
                # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
                test_keyboard = get_contact_seller_keyboard(user_id=user_telegram_id)
                print(f"üîß –°—Ç–≤–æ—Ä–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {test_keyboard}")
                print(f"üîß URL –∫–Ω–æ–ø–∫–∏: tg://user?id={user_telegram_id}")
        
                # –ü—É–±–ª—ñ–∫—É—î–º–æ –ª–æ—Ç —É –∫–∞–Ω–∞–ª
                images = data['images']
                caption = f"üîÅ {data['generated_text']}"
                caption = clean_surrogates(caption)

                if len(images) == 1:
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∑ —Ç–µ–∫—Å—Ç–æ–º
                    msg = await callback.bot.send_photo(
                        chat_id=callback.bot.config.CHANNEL_ID,
                        photo=images[0],
                        caption=caption
                    )
                    await callback.bot.db.set_lot_message_id(lot_id, msg.message_id)
            
                    # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    stars = await render_stars(user['id'], callback.bot)  # –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π ID –¥–ª—è –ë–î
            
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–º —Ç–∞ –∫–Ω–æ–ø–∫–æ—é –∫–æ–Ω—Ç–∞–∫—Ç—É
                    await callback.bot.send_message(
                        chat_id=callback.bot.config.CHANNEL_ID,
                        text=f"{stars}\n\n‚≠êÔ∏è–õ–æ—Ç –≤—ñ–¥ Wonder Trust‚≠êÔ∏è:",
                        reply_markup=get_contact_seller_keyboard(user_id=user_telegram_id, username=username)

                    )

                elif len(images) > 1:
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –º–µ–¥—ñ–∞-–≥—Ä—É–ø—É
                    media = [InputMediaPhoto(media=img) for img in images]
                    media[0].caption = caption

                    msgs = await callback.bot.send_media_group(
                        chat_id=callback.bot.config.CHANNEL_ID,
                        media=media
                    )
                    first_msg_id = msgs[0].message_id if msgs else None
                    await callback.bot.db.set_lot_message_id(lot_id, first_msg_id)
            
                    # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    stars = await render_stars(user['id'], callback.bot)  # –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π ID –¥–ª—è –ë–î
            
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–º —Ç–∞ –∫–Ω–æ–ø–∫–æ—é –∫–æ–Ω—Ç–∞–∫—Ç—É
                    await callback.bot.send_message(
                        chat_id=callback.bot.config.CHANNEL_ID,
                        text=f"{stars}\n\n‚≠êÔ∏è–õ–æ—Ç –≤—ñ–¥ Wonder Trust‚≠êÔ∏è:",
                        reply_markup=get_contact_seller_keyboard(user_id=user_telegram_id, username=username)

                    )

                await callback.bot.db.update_lot_status(lot_id, 'active')

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ª–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª: {e}")
                await callback.message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ª–æ—Ç: {e}")

                    

                await callback.bot.db.update_lot_status(lot_id, 'active')

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ª–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª: {e}")
                await callback.message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ª–æ—Ç: {e}")

            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            text = (
                "‚úÖ –õ–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ!\n\n"
                "–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Wonder_Loop! üíñ"
            )
            await callback.message.answer(text, reply_markup=get_main_keyboard())

        else:
            text = (
                "‚úÖ –õ–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!\n\n"
                "–ú–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –π–æ–≥–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
            )

        await callback.message.answer(
            text,
            reply_markup=get_main_keyboard()
        )

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ª–æ—Ç—É: {e}")
        await callback.message.answer("‚ùå –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ª–æ—Ç—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
        await state.clear()




@router.callback_query(F.data.startswith("lot_status_"))
async def change_lot_status(callback: CallbackQuery):
    bot = callback.bot  # –∞–±–æ –¥–æ–¥–∞–π bot –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º, —è–∫—â–æ —Ö–æ—á–µ—à
    try:
        _, _, lot_id_str, new_status = callback.data.split("_")
        lot_id = int(lot_id_str)

        lot = await bot.db.get_lot(lot_id)
        if not lot:
            await callback.answer("‚ùå –õ–æ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        await bot.db.update_lot_status(lot_id, new_status)

        if lot.get("message_id"):
            lot["status"] = new_status
            await update_channel_post(bot, lot)

        status_texts = {
            'active': '–∞–∫—Ç—É–∞–ª—å–Ω–∏–º',
            'reserved': '–∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∏–º',
            'sold': '–ø—Ä–æ–¥–∞–Ω–∏–º',
            'inactive': '–Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∏–º'
        }

        await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        try:
            await callback.message.edit_text(
                f"‚úÖ –°—Ç–∞—Ç—É—Å –ª–æ—Ç—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{status_texts.get(new_status, new_status)}'!"
            )
        except:
            pass

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –ª–æ—Ç–∞ {callback.data}: {e}")
        await callback.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", show_alert=True)







 








@router.callback_query()
async def catch_all_callbacks(callback: CallbackQuery):
    logger.warning(f"üëÄ –ù–ï–°–ü–Ü–ô–ú–ê–ù–ò–ô CALLBACK: {callback.data}")
    await callback.answer("‚õîÔ∏è –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


# === –ê–î–ú–Ü–ù –ö–û–ú–ê–ù–î–ò ===

@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"""
    if message.from_user.id not in message.bot.config.ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ")
        return
    
    stats = await message.bot.db.get_general_stats()
    
    text = f"""
üîß –ê–î–ú–Ü–ù –ü–ê–ù–ï–õ–¨ WONDER_LOOP

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}
‚úÖ –î–æ–≤—ñ—Ä–µ–Ω–∏—Ö: {stats['trusted_users']}
üì¶ –õ–æ—Ç—ñ–≤: {stats['total_lots']}
üí∞ –ü—Ä–æ–¥–∞–Ω–æ: {stats['total_sold']}

üéõ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚è≥ –ß–µ—Ä–≥–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="admin_queue"),
            
        ],
        [
            InlineKeyboardButton(text="üìã –û–Ω–æ–≤–∏—Ç–∏ –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö", callback_data="admin_trusted"),
            InlineKeyboardButton(text="üì¢ –†–æ–∑—Å–∏–ª–∫–∞", callback_data="admin_broadcast")
        ],
        [
            InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —é–∑–µ—Ä–∞–º–∏", callback_data="admin_users"),
            
        ],
        [
            InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —á–µ—Ä–≥—É", callback_data="clear_queue")
        ]
    ])
    
    await message.answer(text, reply_markup=keyboard)  # –±–µ–∑ parse_mode


@router.callback_query(F.data == "clear_queue")
async def handle_clear_queue(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç–∏ —á–µ—Ä–≥—É –º–æ–¥–µ—Ä–∞—Ü—ñ—ó (pending –ª–æ—Ç–∏)"""
    count = await callback.bot.db.clear_pending_lots()
    await callback.message.edit_text(f"üßπ –û—á–∏—Å—Ç–∏–ª–∏ {count} –ª–æ—Ç(—ñ–≤) –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'.")
    await callback.answer("–ß–µ—Ä–≥–∞ –æ—á–∏—â–µ–Ω–∞ ‚úÖ")




# === –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ===

def get_status_emoji(status: str) -> str:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–º–æ–¥–∑—ñ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É"""
    emojis = {
        'pending': '‚è≥',
        'active': 'üîÅ',
        'reserved': 'üîí',
        'sold': '‚úÖ',
        'rejected': '‚ùå',
        'deleted': 'üóë',
        'inactive': 'üö´'  # üëà –∞–±–æ —ñ–Ω—à–∏–π –µ–º–æ–¥–∂—ñ –Ω–∞ —Ç–≤—ñ–π —Å–º–∞–∫
    }

    return emojis.get(status, '‚ùì')

def get_status_text(status: str) -> str:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è —Å—Ç–∞—Ç—É—Å—É"""
    statuses = {
        'pending': '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó',
        'active': '–ê–∫—Ç—É–∞–ª—å–Ω–æ',
        'reserved': '–ó–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ',
        'sold': '–ü—Ä–æ–¥–∞–Ω–æ',
        'rejected': '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ',
        'deleted': '–í–∏–¥–∞–ª–µ–Ω–æ',
        'inactive': '–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ'  # üëà –æ—Å—å —Ü–µ–π —Ä—è–¥–æ—á–æ–∫
    }
    return statuses.get(status, '–ù–µ–≤—ñ–¥–æ–º–æ')


def create_default_post_text(data: dict) -> str:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É –ø–æ—Å—Ç–∞"""
    text = f"‚ú® **{data['title']}**\n\n"
    text += f"üìä –ó–∞–ª–∏—à–æ–∫: {data['left_percent']}%\n"
    text += f"üìÖ –í—ñ–¥–∫—Ä–∏—Ç–æ: {data['opened_at']}\n"
    text += f"‚è∞ –î—ñ—î –¥–æ: {data['expire_at']}\n"
    text += f"üí≠ –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {data['reason']}\n"
    text += f"üß¥ –¢–∏–ø —à–∫—ñ—Ä–∏: {data['skin_type']}\n"
    text += f"üí∏ –ö—É–ø—É–≤–∞–ª–∞ –∑–∞: {data['price_buy']} –≥—Ä–Ω\n"
    text += f"üí∞ –¶—ñ–Ω–∞: **{data['price_sell']} –≥—Ä–Ω**\n"
    text += f"üì± –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {data['category']}\n"
    text += f"üèô –ú—ñ—Å—Ç–æ: {data['city']}\n"
    text += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {data['delivery']}\n\n"
    text += "üì© –ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!"
    
    return text


async def update_channel_post(bot, lot: dict):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª—ñ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É"""
    try:
        status_emoji = get_status_emoji(lot['status'])
        status_text = status_human(lot['status'])

        
        

        updated_caption = (
            f"{status_emoji} {lot['generated_text']}\n\n"
            f"üîÅ –°—Ç–∞—Ç—É—Å: *{status_text}*\n"
            
        )

       

        await bot.edit_message_caption(
            chat_id=bot.config.CHANNEL_ID,
            message_id=lot['message_id'],
            caption=updated_caption,
            parse_mode="Markdown",
            
        )


    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ—Å—Ç–∞: {e}")


